<section xml:id="strings_string-iteration"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>String Iteration</title>

  <subsection>
    <title>A loop for strings</title>

    <p>By combining <pf>size</pf> and <pf>at()</pf>, we can write a loop that iterates through the
      characters of a string: </p>

    <listing>
    <program label="strings_string-iteration-program-1"
             interactive="activecode">
<xi:include href="../../programs/strings/string-iteration-1.cpp" parse="text"/>
</program>
    </listing>

    <p>The loop counts from 0 to <pf>size() - 1</pf> (<pf>&lt; size()</pf>). For each of
      those values, it asks for the character at that index and then prints it. Notice that the
      counter for this loop is of type <pf>size_t</pf>. If we try to make it an <pf>int</pf>, the compiler
      will likely produce an error or warning when we try to compare it to <pf>size()</pf>, which is a <pf>size_t</pf>.
      Comparing signed numbers - those that can hold negative numbers like <pf>int</pf> - with unsigned
      values - those that can only hold positive values like <pf>size_t</pf> - can produce confusing
      results. </p>

    <p>We could use the same basic loop to modify each character. This program encrypts the string <pf>myString</pf>
      (very poorly) by shifting each character by 1 alphabetically:</p>

    <listing>
    <program label="strings_string-iteration-program-2"
             interactive="activecode">
<xi:include href="../../programs/strings/string-iteration-2.cpp" parse="text"/>
</program>
    </listing>
  </subsection>

  <subsection>
    <title>The ranged-based for loop</title>

    <p>If we are doing something like printing each character in a string, we don't actually care
      about which character is at which index. We just want to do something to each character (print
      it). There is a syntax to make that easier known as the <term>range-based for loop</term> or <term>enhanced
      for loop</term><idx>
        <h>loop</h>
        <h>range-based</h>
      </idx> <idx>
        <h>loop</h>
        <h>enhanced for</h>
      </idx><idx>
        <h>for</h>
        <h>enhanced</h>
      </idx>:</p>

    <program>
    for (char c : myString) {
        // use c
    }
  </program>

    <p>You should read that loop as <q>for each character, call it c, in myString, do...</q> The
      range-based for loop automatically counts through the characters one by one. For each
      iteration of the loop, the next character is stored into the character variable declared in
      the loop. In that example, the character is named <pf>c</pf>, but you can name it anything you
      like. Then, in the loop, you can use that character variable to access the <q>current letter</q>.
      This example uses the ranged-based loop to count the number of spaces in a string:</p>

    <listing>
    <program label="strings_string-iteration-program-3"
             interactive="activecode">
<xi:include href="../../programs/strings/string-iteration-3.cpp" parse="text"/>
</program>
    </listing>

    <p>There are some limitations to the ranged-based loop that mean it is not always the best
      option: <ul>
        <li>You don't know the index of the item you are working with</li>
        <li>Changing the character you are working with does not change the string itself</li>
      </ul>
  
  <p>There
      is a syntax for allowing changes to the character variable to also change the string. We will
      cover that syntax later in <xref ref="references-exceptions_string-iteration-ref"/> For now, if you care about the location of each
      character, or if you need to change the string as you iterate through it, you should not use a
      range-based loop.</p>
    </p>

    <p>There is no reason you ever have to use the ranged-based loops, you always can use a regular
      counting loop that counts from 0 to <pf>size() - 1</pf> and index into the string. But the syntax is so
      simple you likely will want to make use of them.</p>

  </subsection>


  <exercise label="strings_string-iteration-ex-1">
    <statement>
      <p>What would be printed by this code? (Hint: pay attention to the loop update). <fillin mode="string"
                answer="cdn ok"/>
        .
      </p>
      <program>
string s = "coding rocks";
for (size_t i = 0; i &lt; s.size(); i += 2) {
  cout &lt;&lt; s.at(i);
}
      </program>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>co.*</strcmp>
          <feedback> The loop counter starts at 0 and increments by 2 each time. </feedback>
        </test>
        <test>
          <strcmp>o.*</strcmp>
          <feedback> The loop counter starts at 0 and increments by 2 each time. </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>


  <exercise label="strings_string-iteration-ex-2">
    <statement>
      <p>What would be printed by this code? (Hint: pay attention to the loop start and end). <fillin mode="string"
                answer="hell"/>
        .
      </p>
      <program>
string s = "hello";
for (size_t i = 1; i &lt; s.size() - 1; ++i) {
  cout &lt;&lt; s.at(i);
}
      </program>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>h.*</strcmp>
          <feedback> The loop counter starts at 1. </feedback>
        </test>
        <test>
          <strcmp>.*o</strcmp>
          <feedback> The loop stops when the counter is 1 less than the length of the string. </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>