<section xml:id="strings_string-conversion"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Strings and Numbers</title>

  <p>We already know that <pf>123</pf> is different than <pf>"123"</pf>. The former is a number, the later a string. The type of data we are working with determines what operators we can use on it and what those operators do. Applied to integers, <pf>+</pf> adds them and <pf>*</pf> multiplies them. For strings, there is no definition for what <pf>*</pf> means. That means it is a syntax error to try to write something like:</p>

  <program>
    string message = "Hello";
    string message2 = "world";
    string x = message * message2;  // syntax error. What does * mean here???
  </program>

  <p>For <pf>+</pf> applied to strings, there is a definition - it does concatenation. So what happens if you try to mix data types? What happens if you <pf>+</pf> an <pf>int</pf> and a <pf>string</pf>?</p>

  <p>It turns out that in C++ that operation is not defined. And there is no easy way to modify the data so the operation makes sense. We can do <pf>+</pf> with an <pf>int</pf> and a <pf>double</pf> because the compiler knows that it is safe to turn any int into a double. But that is not true of strings. <pf>"hello"</pf> is clearly not a number. Although it seems like <pf>"123"</pf> could safely be converted to a number, what should happens with <pf>"42f"</pf> or <pf>"7534759743912749237492"</pf> (which is too large to store as an int). Because there is no guarantee that we can convert back and forth, the compiler will never try to do that for us.</p>

  <p>Normally, if we want to tell the compiler to make a copy of something as a new type of data, we use <pf>static_cast</pf>. But a <pf>static_cast</pf> assumes the compiler has a rule to do the conversion and is just reluctant to do so. The static cast is our way of saying <q>I know you think this is dangerous, I am sure I want to do it anyway.</q> But the compiler does not even have a general rule for converting back and forth from numbers to strings. So we can't use <pf>static_cast</pf> to do so.</p>

  <p>Instead, we use <pf>to_string</pf>, <pf>stoi</pf>, and <pf>stod</pf>. <pf>to_string</pf> takes any numeric value and returns a string representation of it. <pf>stoi</pf> (string to integer) takes a string and tries to produce the integer value it represents. <pf>stod</pf> (string to double) does the same thing with a double value.</p>

  <warning><p>If you use pass a non-numeric string to <pf>stoi</pf> or <pf>stod</pf>, like <pf>"hello"</pf>, the program will throw an exception. For now, that means it will crash. We will learn how to handle exceptions soon.</p></warning>

  <p><pf>to_string</pf> is useful if you want to build up a string that contains a numeric value:</p>

  <listing>
  <program line-numbers="yes" highlight-lines="5">
  double width = 10;
  double height = 25;
  double area = width * height;
  string message = "The area is ";
  message += to_string(area);
  message += " square units.";
  </program>
  </listing>

  <p>Without <pf>to_string</pf> there would be a compiler error when we tried to add the numeric value <pf>area</pf> to the string <pf>message</pf>.</p>

  <p><pf>stoi</pf> and <pf>stod</pf> are useful if we need to do with math on numbers that were part of a string. This example takes a string in the format <pf>WIDTHxHEIGHT</pf> and calculates the area:</p>

  <listing>
  <program label="strings_string-conversion-program-1" interactive="activecode">
<xi:include href="../../programs/strings/string-conversions-1.cpp" parse="text"/>
  </program>
  </listing>

  <exercise label="strings_string-conversion-ex-1">
    <statement>
      <p>What is the function that takes a string, attempts to determine what integer it represents, converts it into an integer, and if successful returns that integer? (Don't include parentheses, just the function name.)</p>
      <p><fillin mode="string" answer="stoi"/></p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
</section>