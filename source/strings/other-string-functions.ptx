<section xml:id="strings_other-string-functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Other String Functions</title>

  <introduction>
    <p>Any task you need to be done with strings can be done with the tools we have learned so far:
      <pf>.size()</pf>, <pf>.find()</pf>, and <pf>.substr()</pf>. But if you check out a <url href="https://en.cppreference.com/w/cpp/string/basic_string">reference
      for the <pf>&lt;string></pf> library</url>, you will find many other functions. These other functions
      can make some jobs easier than trying to do the work with just the three member functions we
      have learned about. This section introduces a few of them but does not cover all of the
      functions.</p>
  </introduction>

  <subsection>
    <title>Other finds</title>
    <p>There are alternatives to <pf>.find()</pf> that can help when you want to find the last copy of some
      substring or are looking for one of many items.</p>

    <p><pf>size_t rfind(string s, size_t pos = npos)</pf> works just like find, but searches in reverse
      (from right to left). You can give it a position to start from, otherwise it starts from the
      end of the string. Say we want to find the last <pf>/</pf> in a string. We could write a loop that
      looks for <pf>/</pf>, then keeps looking for another <pf>/</pf> after that location until it can't find any
      more. <pf>rfind()</pf> makes this much easier:</p>

    <listing>
    <program><![CDATA[ 
string path = "http://example.com/home/user/files/file.txt";

size_t lastSlash = path.rfind("/");

// without rfind:
size_t lastSlash = path.find("/");
size_t nextSlash = path.find("/", lastSlash + 1);
while (nextSlash != string::npos) {
    lastSlash = nextSlash;
    nextSlash = path.find("/", lastSlash + 1);
}

  ]]></program>
    </listing>

    <p><pf>find_first_of</pf> and <pf>find_last_of</pf> let you specify a set of characters to look for. Say we
      want to find the first vowel in a string. One way would be to write our own loop that checks
      letter by letter until it find something that when made lowercase matches a e i o or u.:</p>

    <listing>
    <program><![CDATA[
// assume string s is defined
size_t firstVowelLocation = string::npos;  // assume no vowel
for (int i = 0; i < s.size(); ++i) {
    // get current letter, make it lower case, cast result to char
    char c = static_cast<char>( tolower( s.at(i) ) );  
    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
        firstVowelLocation = i;
        break;  //end loop
    }
}
]]>
</program>
    </listing>

    <p>But <pf>find_first_of</pf> can handle the loop for us. We just need to tell it what to look for (any
      upper or lower case letter).</p>

    <program><![CDATA[
// assume string s is defined
size_t firstVowelLocation = s.find_first_of("aeiouAEIOU");
]]>
</program>

  </subsection>

  <subsection>
    <title>String modifying functions</title>

    <p>The other class of string member functions it is worth knowing about are string modifying functions. These are ones that change an existing string (instead of making a copy of part of it like <pf>substr</pf> does). The two key ones are <pf>erase</pf> and <pf>replace</pf>.</p>
    
    <p>The prototype for looks like:</p> 
    
    <program>erase(size_t index, size_t count = npos)</program>
    
    <p>You need to tell it what index to start erasing from and optionally, how many characters to erase (everything from that location to end is the default. Here it is in action:</p>

    <listing>
    <program label="strings_other-string-functions-program-1" interactive="activecode">
<xi:include href="../../programs/strings/other-string-functions-1.cpp" parse="text"/>
    </program>
    </listing>

    <p>Note that we do not need to store the result of calling <pf>erase</pf>. Just calling the member function changes the string that we called it on.</p>

    <p>To do the same work without erase, we would need to grab two substrings, concatenate them, and store the result back into a variable. Below is an example of what that looks like (you can test it in the activecode above if you like.)</p>
    
    <program>
<xi:include href="../../programs/strings/other-string-functions-2.cpp" parse="text"/>
    </program>

    <p><pf>replace</pf> looks similar to <pf>erase</pf>, but has an additional parameter <pf>str</pf> that is put where the erased text was. Here is what it would look like to erase the word <pf>World</pf> (5 charcters) that starts at index 6, with the string <pf>"you"</pf>:</p>

  <listing>
  <program label="strings_other-string-functions-program-2" interactive="activecode">
<xi:include href="../../programs/strings/other-string-functions-3.cpp" parse="text"/>
  </program>
  </listing>

  <p>Again, we could do something equivalent without <pf>replace</pf> by grabbing the <pf>substr</pf>s before and after the part we want to replace and then concatenating them with something like: <pf>message = part1 + "you" + part2;</pf></p>

  </subsection>

  
  <exercise label="strings_other-string-functions-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>We have a string <c>s</c> that might be an email address with an <c>@</c>. Write code to detect if it has an <c>@</c>. If so, remove everything from the <c>@</c> symbol on. If not, print an error message.</p>
    </statement>
    <blocks>
      <block>
        <cline>size_t atIndex = s.find('@');</cline>
      </block>
      <block>
        <cline>if (atIndex != string::npos) {</cline>
      </block>
      <block>
        <choice correct="yes">
          <cline>  s.erase(atIndex);</cline>
        </choice>
        <choice>
          <cline>  s.remove(atIndex);</cline>
        </choice>
        <choice>
          <cline>  s.erase('@');</cline>
        </choice>
        <choice>
          <cline>  s.remove('@');</cline>
        </choice>
      </block>
      <block>
        <cline>} else {</cline>
      </block>
      <block>
        <cline>  cout &lt;&lt; "Error no @" &lt;&lt; endl;</cline>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

</section>