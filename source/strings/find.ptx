<section xml:id="strings_find"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>find in strings </title>
  <p>
    <idx>
      <h>string</h>
      <h>find</h>
    </idx> To search for a specific character in a string we could write a counting
    loop and look at each character until we find the one we want. But this kind of fundamental task
    is the kind of thing library functions are good for. <pf>string</pf> objects provide a <pf>find</pf> function
    that finds the first occurrence of a char or string within a string. If you look it up, you will
    find multiple declarations: </p>

  <program>
  size_t find (const string&amp; str, size_t pos = 0) const;
  size_t find (char c, size_t pos = 0) const;
</program>

  <p>The first one takes a string as a parameter, and the second one takes a character. Both have an
    optional second parameter <pf>pos</pf>, which sets a start point for the search. (Recall that the <pf>= 0</pf> is the default value, making that parameter optional. See <xref ref="functions-testing_optional-parameters"/>.). Thus `myString.find('e',
    10)<pf> says <q>find the first 'e' in myString at or after index 10</q> while </pf>myString.find('e')` means <q>start from 0</q>. Both functions return the
    index where they find item being searched from. Because they are returning a location in a
    string, they return that value as a <pf>size_t</pf> and not as an <pf>int</pf>. </p>

  <p>The example below demonstrates their use on the string <pf>She sells sea shells</pf>. For reference,
    here are the indices for the characters of that string:</p>

  <tabular>
    <row bottom="minor">
      <cell>0</cell>
      <cell>1</cell>
      <cell>2</cell>
      <cell>3</cell>
      <cell>4</cell>
      <cell>5</cell>
      <cell>6</cell>
      <cell>7</cell>
      <cell>8</cell>
      <cell>9</cell>
      <cell>10</cell>
      <cell>11</cell>
      <cell>12</cell>
      <cell>13</cell>
      <cell>14</cell>
      <cell>15</cell>
      <cell>16</cell>
      <cell>17</cell>
      <cell>18</cell>
      <cell>19</cell>
    </row>
    <row>
      <cell>S</cell>
      <cell>h</cell>
      <cell>e</cell>
      <cell> </cell>
      <cell>s</cell>
      <cell>e</cell>
      <cell>l</cell>
      <cell>l</cell>
      <cell>s</cell>
      <cell> </cell>
      <cell>s</cell>
      <cell>e</cell>
      <cell>a</cell>
      <cell> </cell>
      <cell>s</cell>
      <cell>h</cell>
      <cell>e</cell>
      <cell>l</cell>
      <cell>l</cell>
      <cell>s</cell>
    </row>
  </tabular>

  <listing>
  <program label="strings_find-program-1"
           interactive="activecode">
<xi:include href="../../programs/strings/string-find-1.cpp" parse="text"/>
</program>
  </listing>

  <p>Some things to note: <ul>
      <li>The first <pf>e</pf> is at index 2 (in <q>She</q>)</li>
      <li>The first <pf>ell</pf> starts at index 5</li>
      <li>The first <pf>se</pf> starts at index 4. That is the value stored into <pf>seIndex</pf></li>
      <li><pf>myString.find("se", seIndex + 1)</pf> starts from index 5. Starting at that point, the next
    occurrence of "se" is at index 10.</li>
    </ul>
  </p>

  <warning>
    <p>A common mistake is to write <pf>myString.find('e', 2)</pf> in an attempt to find the second <pf>e</pf>.
      That actually says <q>find the first <pf>e</pf> that is at or after index 2.</q> The only way to
      <pf>find()</pf> the second occurrence of something is to find it once, and then call find again
      starting at the index 1 past where the first copy was found. As done to find the second <pf>"se"</pf>
      in the sample above.</p>
  </warning>

  <p>If you try to <pf>find()</pf> something that is not there, the find function needs to return a value
    to you that indicates <q>not found</q>. That value can't be 0, as that is a valid location. So
    the value it returns is the largest possible <pf>size_t</pf>. This is <pf>find()</pf>'s way of saying <q>I
    searched until the end and did not find what I was looking for</q>. Rather than try to memorize the value (which can be different on different platforms!), there is a constant that defines this value: <pf>string::npos</pf>. (Think of <pf>string::npos</pf> as meaning <q>npos which is a part of string</q>. <pf>npos</pf> is short for <q>no position</q> or <q>null position</q>.)</p>

  <p>Here is an example of trying to find <pf>q</pf> in our string:</p>

  <listing>
  <program label="strings_find-program-2"
           interactive="activecode">
<xi:include href="../../programs/strings/string-find-2.cpp" parse="text"/>
</program>
  </listing>

  <p>You can try changing the <pf>target</pf> to some character to see the behavior when the value is found.</p>

  <insight><p>This is how you check if a string contains some other string. Do a <pf>find()</pf> and see if the value is <pf>!= string::npos</pf>.</p></insight>

  <note>
  <p>If you store attempt to store <pf>string::npos</pf> to an int, it will have the value -1. This is because <pf>string::npos</pf> is the binary value <pf>111111...1</pf>. That value as a signed <pf>int</pf> is <pf>-1</pf>.</p>
  <p>In many programming languages, a failed <pf>find()</pf> returns -1. And that is sort of true in C++. If you cast the returned value into an <pf>int</pf> it becomes -1. But it isn't accurate to say that it returns -1. If you try to write something like <pf>if (s.find('x') == -1)</pf> the compiler will give a warning about comparing the signed (-1) and unsigned (<pf>string::npos</pf>) values.</p>
  </note>


  <exercise label="strings_find-ex-1">
    <statement>
      <p>Click on the name of each variable that gets set to 0.</p>
    </statement>
    <areas>
<cline>string fruit = "apple";</cline>
<cline>size_t <area correct="no"> index_a </area> = fruit.find('e');</cline>
<cline>size_t <area correct="yes"> index_b </area> = fruit.find("app");</cline>
<cline>size_t <area correct="yes"> index_c </area> = fruit.find('a');</cline>
<cline>size_t <area correct="no"> index_d </area> = fruit.find('l');</cline>
    </areas>
  </exercise>

  
  
  <exercise label="strings_find-ex-2">
    <statement>
      <p>What is the constant that represents <q>not found</q> or <q>null position</q>?
      <fillin mode="string" answer="string::npos"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>npos</strcmp>
          <feedback>
            You need to include the <pf>string::</pf> part when you use <pf>npos</pf>
          </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <exercise label="strings_find-ex-3"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Construct a block of code that correctly finds and prints where the third <pf>i</pf> is in
        the string.</p>
    </statement>
    <blocks>
      <block>
        <cline>int main() {</cline>
        <cline> string state = "Mississippi";</cline>
      </block>
      <block>
        <choice correct="yes">
          <cline> size_t indexA = city.find('i');</cline>
        </choice>
        <choice>
          <cline> size_t indexA = city.find(i); </cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline> size_t indexB = city.find('i', indexA + 1);</cline>
        </choice>
        <choice>
          <cline> size_t indexB = city.find('i', indexA);</cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline> size_t indexC = city.find('i', indexB + 1);</cline>
        </choice>
        <choice>
          <cline> size_t indexC = city.find('i', indexA + 1);</cline>
        </choice>
      </block>
      <block>
        <cline> <![CDATA[cout << indexC << endl;]]></cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

</section>