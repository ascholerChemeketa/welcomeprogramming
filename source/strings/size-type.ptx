<section xml:id="strings_character-size-type"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title><pf>size_t</pf></title>

  <p>If you look up the prototype for <pf>size()</pf> you will find a listing that looks like:</p>

  <program>
  size_type size() const;
  </program>

  <p>The <pf>const</pf> at the end says <q>this function will not change the string</q>. This is a slightly different use of the <pf>const</pf> keyword than we have seen before when declaring constants. But it gets at the same idea. This <pf>const</pf> at the end of the prototype guarantees that if you call <pf>fruit.size()</pf>, the string <pf>fruit</pf> will not be modified.</p>

  <p>The return type - <pf>size_type</pf> - is new. It would be reasonable to expect <pf>size()</pf> to return an <pf>int</pf>. We expect size to be a value like 0 or 6 or 3234. So why doesn't it? The short version is that 1) we never expect the size to be negative; 2) the exact maximum size of an <pf>int</pf> variable is not always the same from one platform to another. You should think of <pf>size_type</pf> as a type that is guaranteed to be able to hold the size of any possible string and can only hold 0 or positive numbers.
  <idx><h>size_t</h></idx></p>

  <p>To store a <pf>size_type</pf> we will use a variable of type <pf>size_t</pf>. This is a bit of a simplification (see <xref ref="size_t-vs-size_type"/>). But it will serve our needs just fine. You can use a <pf>size_t</pf> just like an <pf>int</pf>. You can do math with them, compare them to other numbers, etc... The only difference is that they can never hold a negative value. Trying to assign one will result in the value <q>wrapping around</q> and becoming a large positive one:</p>

    <listing>
    <program label="strings_character-size-type-program-1"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    string fruit = "Watermelon";
    size_t wordsize = fruit.size();
    cout << wordsize << endl;

    if (wordsize > 5) {
        cout << "That's a long word!" << endl;
    }

    size_t a = 2;
    size_t b = a - 5;  // b can't be negative...
    cout << b << endl; // prints a large positive number
}
        ]]></code>
    </program>
    </listing>

  <insight><p>Any code that needs to talk about the size of a string, or the position of some character(s) in a string, will always use <pf>size_t</pf>. Because <pf>size_t</pf> is not that different than an <pf>int</pf> (other than not being unsigned and possibly having a different max value), you may be able to use <pf>int</pf> values anywhere a <pf>size_t</pf> is expected. But the compiler may give you a warning<mdash/>it knows there are subtle differences that may cause issues.</p></insight>

  <p>Although you should try to use <pf>size_t</pf> when working with the size of strings or locations in strings, there may be times when you want to take something like the size and store it into an <pf>int</pf>. To do so, you just need to cast the value into an <pf>int</pf>:</p>

  <program>
  int size = static_cast&lt;int>(fruit.size());
  </program>

  <note xml:id="size_t-vs-size_type"><p><pf>size_t</pf> is technically different than the <pf>size_type</pf> defined in <pf>string</pf>, which has the full name of <pf>string::size_type</pf>. However, <pf>string::size_type</pf> is usually defined as being the same as <pf>size_t</pf>. And <pf>size_t</pf> is often defined as being the same as <pf>uint64_t</pf> (see <xref ref="floatingpoint-math_other-size-types-unsigned"/> for <pf>unit64_t</pf>). So why have three different names for what all end up as the same type? Flexibility. It does not HAVE to be the case that <pf>string::size_type</pf> is always a 64-bit unsigned integer. On some computing platforms a different value might make more sense.</p></note>

  <exercise label="strings_character-size-type-ex-1">
    <statement>
      <p>Which statements are correct about the <pf>size_t</pf> data type.</p>
    </statement>
    <choices multiple-correct="yes">
      <choice>
        <statement>
          <p>They can store any value an <pf>int</pf> can</p>
        </statement>
        <feedback>
          <pf>size_t</pf> can't store negative values
        </feedback>
      </choice>

      <choice>
        <statement>
          <p>It can store decimal values</p>
        </statement>
        <feedback>
          <pf>size_t</pf> stores integer values.
        </feedback>
      </choice>

      <choice correct="yes">
        <statement>
          <p>You can do arithmetic or comparisons mixing  <pf>size_t</pf> and numbers</p>
        </statement>
        <feedback>
          Correct! <pf>size_t</pf> is a number and you can use it in arithmetic and comparisons.
        </feedback>
      </choice>

    </choices>
  </exercise>

</section>