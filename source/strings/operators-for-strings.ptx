<section xml:id="strings_operators-for-strings"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Operators for Strings</title>

  <subsection>
  <title>Comparisons</title>
  <p>
    <idx>
      <h>operator</h>
      <h>string</h>
    </idx> 
    Strings support some of the same operators as numbers. For example, we can use the comparison operators to compare strings:
    </p>
    
  <listing>
  <program label="strings_operators-for-strings-program-1" interactive="activecode">
<xi:include href="../../programs/strings/operators-for-strings-1.cpp" parse="text"/>
</program>
  </listing>

    <p>The equality tests are straightforward. <pf>"apple"</pf> is the same as itself, but not the same as <pf>"Banana"</pf>. Looking at the comparison between <pf>"apple"</pf> and <pf>"Apple"</pf>, it is clear that comparisons are <term>case sensitive</term><mdash/>they care about the difference between <pf>a</pf> and <pf>A</pf>.</p>
    
    <p>The <q>less than</q> tests are a little less obvious. But they make sense when you recall that characters have numeric values based on their position in the ASCII table (or Unicode table for wide characters). Why is <pf>"Apple"</pf> less than <pf>"Banana"</pf>? Because <pf>A</pf> comes before <pf>B</pf> on the ASCII table. Why is <pf>"Banana"</pf> less than <pf>"apple"</pf>? Because <pf>B</pf> comes before <pf>a</pf> on the ASCII table.</p>
    
    <p>If the first <m>n</m> characters of two strings match, the <m>n + 1</m> characters will determine their order. <pf>"pear" &lt; "peer"</pf> is true because both start with <pf>pe</pf> and the third character in pear - <pf>a</pf> - is <q>less than</q> the 3rd character in peer - <pf>e</pf>.</p>

    <insight><p>Because string comparisons depend on case, it is common to convert strings to all lower or all upper case before comparing them.</p></insight>

    </subsection>
    <subsection>
      <title>Concatenation</title>
      
      <p>Strings also support the <pf>+</pf> operator. But for strings <pf>+</pf> does not mean <q>plus</q>. It means <term>concatenate</term>, which is a fancy way of saying <q>join end-to-end</q>. So <pf>"Hello, " + "World!"</pf> yields the string <pf>"Hello, World!"</pf>.
    <idx>
      <h>concatenate</h>
    </idx>
    <idx>
      <h>addition</h>
    </idx></p>

    <p><pf>+</pf> and the <pf>+=</pf> shortcut  is useful if you want to build up a string piece by piece.</p>

  <listing>
  <program>
string name = "Ada";
name = name + " Lovelace"; // name is now "Ada Lovelace"
string greeting = "Hello, " + name + "!";
                           // greeting is now "Hello, Ada Lovelace!"

string name2 = "Alan";
name2 += " Turing";        // name2 is now "Alan Turing"
  </program>
  </listing>

  <p> Many string algorithms involve reading one string and building another. For example, to
    reverse a string, we can concatenate one character at a time to the front of a new string.
    <idx>
      <h>empty string</h>
    </idx> The initial value of <pf>reversed</pf> is <pf>""</pf>, which is an <term>empty
    string</term>. As we iterate through each character, we set <pf>reversed</pf> to be that character concatenated with the other characters we have seen. Since the loop goes from beginning to end, adding each character to the front of <pf>reversed</pf> means that the last character of <pf>myString</pf> ends up being the first character of <pf>reversed</pf>:</p>

  <listing>
  <program label="strings_operators-for-strings-program-2" interactive="activecode">
<xi:include href="../../programs/strings/string-reverse.cpp" parse="text"/>
</program>
  </listing>

  <exercise label="strings_operators-for-strings-ex-1">
    <statement>
      <p>What would the result of the following comparison be? Where <pf>1</pf> means true and <pf>0</pf>
        means false.</p>
      <program line-numbers="yes">
        <code><![CDATA[
"bread" < "bread";
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          They are equal so one can't be greater than the other.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          Correct! because they are equal. They are equal because all characters match.
        </feedback>
      </choice>
    </choices>
  </exercise>

  
  <exercise label="strings_operators-for-strings-ex-2">
    <statement>
      <p>What would the result of the following comparison be? Where <pf>1</pf> means true and <pf>0</pf>
        means false.</p>
      <program line-numbers="yes">
        <code><![CDATA[
"car" == "Car";
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          Remember that case matters.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          Correct! The case of the first characters are different.
        </feedback>
      </choice>
    </choices>
  </exercise>


  <exercise label="strings_operators-for-strings-ex-3">
    <statement>
      <p>What would the result of the following comparison be? Where <pf>1</pf> means true and <pf>0</pf>
        means false.</p>
      <program line-numbers="yes">
        <code><![CDATA[
"Dog" < "Doghouse";
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          Both match up to the g but Dog is shorter than Doghouse so it comes first in the
            dictionary.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          Strings are compared character by character.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="strings_operators-for-strings-ex-4">
    <statement>
      <p>What would the result of the following comparison be? Where <pf>1</pf> means true and <pf>0</pf>
        means false.</p>
      <program line-numbers="yes">
        <code>
"dog" &lt; "Dog";
</code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          d is greater than D
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          Yes, upper case is less than lower case according to the ordinal values of the
            characters.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>They are the same word</p>
        </statement>
        <feedback>
          C++ is case sensitive meaning that upper case and lower case characters are different.
        </feedback>
      </choice>
    </choices>
  </exercise>
  

  </subsection>

  <warning><p>The <pf>+</pf> operator is defined for a char and a C-string, but it does not do what you expect. Avoid trying to write something like <pf>"hell" + 'o'</pf>. Make sure when you are using <pf>+</pf> you are using a variable of type <pf>string</pf> and not a string literal.</p></warning>

  <exercise label="strings_operators-for-strings-ex-5"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Put together the code below to create a function <pf>greeter</pf> that adds <q>Hello</q> before a message and <q>. goodbye.</q> after it behind and then prints the new message.
        Example: <pf>greeter("Bob")</pf> will print <q>Hello Bob. goodbye.</q></p>
    </statement>
    <blocks>
      <block>
        <choice correct="yes">
          <cline>string beginning = "Hello ";</cline>
          <cline>string end = ". goodbye.";</cline>
        </choice>
        <choice>
          <cline>string beginning = "Hello"; </cline>
          <cline>string end = ". goodbye.";</cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline>string newWord = beginning + message;</cline>
        </choice>
        <choice>
          <cline>string newWord = message + beginning; </cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline>newWord += end;</cline>
        </choice>
        <choice>
          <cline>newWord + end;</cline>
        </choice>
      </block>
      <block correct="no">
        <cline><![CDATA[cout << "newWord"; ]]></cline>
      </block>
      <block>
        <cline>cout &lt;&lt; newWord;</cline>
      </block>
    </blocks>
  </exercise>
</section>