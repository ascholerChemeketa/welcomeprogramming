<section xml:id="strings_character-cstrings"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>strings vs C-strings</title>

  <note><p>This section explains some of the background on why string literals are different than string variables. Being aware of this information is important. But we will not be intentionally programming with the C-strings that are described here - so there are many complexities to C-strings that are intentionally left out of this coverage.</p></note>

  <p>A string literal like <pf>"Hello"</pf> does not have the <pf>string</pf> data type.</p>

  <p>Why? For historical reasons and compatibility with the C language. In C++, <pf>string</pf>s are <term>objects</term><mdash/>bundles of data and functions that operate on that data. We will learn more about this in the coming sections. C does not have objects. So in C, strings are just an array (list) of characters. The original version of C++ used C style strings which are often referred to as <q>C strings</q>. Later, the <pf>&lt;string></pf> library and data type were added.</p>

  <p>Thus it is important to keep in mind that there are multiple types of data that can store characters and the type of storage used changes what we can do with them. This is much like how we can store 2 into either an <pf>int x</pf> or a <pf>double x</pf> and the result of <pf>x / 3</pf> will depend on its type. Here is a list of the types that we use when working with characters:
  
  <ul>
    <li><title><pf>char</pf></title><p>Stores exactly one character. Stores the character as a numeric value.</p></li>
    <li><title><pf>string</pf></title><p>Stores 0+ characters. Stores them as an <term>object</term>. The object contains a list of characters and functions to work with those characters.</p></li>
    <li><title>string literal (C-string)</title><p>A sequence of characters in quotes. Stored as a list of numeric values.</p></li>
  </ul>
  </p>

  <p>Thus it makes sense to ask a string variable what it's size is. But it does not make sense to ask that of a string literal. A string literal is not an object. It is <q>just</q> a sequence of characters.</p>

    <listing>
    <program label="strings_character-cstrings-program-1"
             interactive="activecode">
      <code><![CDATA[
#include <iostream>
#include <string>
using namespace std;

int main() {
    string s = "Hello";
    cout << s.size() << endl;        // prints 5
    cout << "Hello".size() << endl;  // ERROR! There is no size method for a string literal
}
        ]]></code>
        </program>
    </listing>

  <p>The two critical things to remember are:
  <ul>
    <li><pf>'</pf> indicates a <pf>char</pf> literal while <pf>"</pf> indicates a <pf>string</pf> literal</li>
    <li>A literal value is different than a variable. In the case of a string, the variable and literal are very different.</li>
  </ul>
  </p>

  <listing>
  <program><![CDATA[ 
  cout << 'a' << endl;  // a char literal
  char c = 'a';         // a char variable

  cout << "hello" << endl;  // a string literal
  string s = "hello";       // a string variable
  ]]>
  </program>
  </listing>
  
  <p>As long as you keep those two facts in mind, and avoid trying to do work on string literals, you won't have to worry about other details. If you have a string literal to work with, store that literal into a variable and work with the variable.</p>

  <exercise label="strings_character-cstrings-ex-1">
    <statement>
      <p>Click on each string literal.</p>
    </statement>
    <areas>
      <cline><area correct="no">def main() {</area></cline>
      <cline>    <area correct="no">string fruit;</area></cline>
      <cline>    <area correct="no">fruit = </area><area correct="yes">"apple";</area></cline>
      <cline>    <area correct="no">fruit = </area><area correct="yes">"pear";</area></cline>
      <cline>    <area correct="no">string flavor;</area></cline>
      <cline>    <area correct="no">flavor = </area><area correct="yes">"vanilla";</area></cline>
      <cline>    <area correct="no">cout &lt;&lt; flavor;</area></cline>
      <cline>    <area correct="no">cout &lt;&lt; </area><area correct="yes">"honey";</area></cline>
      <cline>}</cline>
    </areas>
  </exercise>

</section>