<section xml:id="strings_substrings"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Substrings</title>

  <p>
    <idx>
      <h>substring</h>
    </idx> In addition to searching strings, we often need to extract parts of
    strings. The <pf>substr</pf> function returns a new string that copies characters from an existing
    string. It's prototype is:</p>

  <program>
string substr (size_t pos = 0, size_t len = npos) const;
</program>

  <p><pf>pos</pf> is the index (position) to start from. <pf>len</pf> is the maximum number of characters to copy.
    Notice that both parameters are optional. Saying <pf>myString.substr()</pf> is the same as
    <pf>myString.substr(0, string::npos)</pf> which says <q>start from the beginning and have no maximum
    number to copy</q>. Here are some sample uses of <pf>substr</pf>:</p>

  <listing>
  <program label="strings_substrings-program-1"
           interactive="activecode">
<xi:include href="../../programs/strings/string-substr-1.cpp" parse="text"/>
</program>
  </listing>

  <p>Note that the original string is not changed. <pf>substr</pf> just copies parts of it, and does not remove them from the original string. Also note that even if we ask for just one character, the value is returned as a single character
    string. Not as a char.</p>

  <insight>
    <p>A string with one letter like <pf>"a"</pf> is still a string. It is a container that holds characters and can execute functions. It just currently holds only one character.</p>
    <p>The character <pf>'a'</pf> is a single character which is a very different thing.</p>
    <p>If you want to get the one character at position <pf>x</pf> from a string as a <pf>char</pf>, use
      <pf>s.at(x)</pf>. If you want to work with the single character as a <pf>string</pf>, use <pf>s.substr(x, 1)</pf>.</p>
  </insight>

  <p>If you set an invalid <pf>pos</pf> for <pf>substr</pf> start from, a run time error will be generated (try
    setting one of the <pf>find</pf>'s above to start from 1000).</p>

  <p>It is common to combine <pf>find</pf> and <pf>substr</pf> to chop up strings. This simple program breaks up an email address into the mailbox name and the domain. Notice that if something we find is at index <pf>x</pf>, then asking for <pf>substr(0, x)</pf> copies everything up to but not including that item:</p>


  <listing>
  <program label="strings_substrings-program-2"
           interactive="activecode">
<code>
<xi:include href="../../programs/strings/string-substr-2.cpp" parse="text"/>
</code>
<stdin>user@college.edu</stdin>
</program>
  </listing>


  <exercise label="strings_substrings-ex-1">
    <statement>
      <p>Given the string declaration: <pf>string s = "football team"</pf>, which is the correct way to copy the string <pf>"ball"</pf> from it?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p><pf>s.substr(5)</pf></p>
        </statement>
        <feedback>
          We need to specify a length
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>s.substr(5, 9)</pf></p>
        </statement>
        <feedback>
          The second parameter is the length, not the end index
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>s.substr('b', 4)</pf></p>
        </statement>
        <feedback>
          The first parameter is the index, not the character
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><pf>s.substr(5, 4)</pf></p>
        </statement>
        <feedback>
          Yes, we want to start at 5 and copy 4 characters
        </feedback>
      </choice>
    </choices>
  </exercise>
  
  <exercise label="strings_substrings-ex-2">
    <statement>
      <p>Given the string declaration: <pf>string s = "football team"</pf>, which are correct ways to copy the string <pf>"team"</pf> from it?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p><pf>s.substr(9)</pf></p>
        </statement>
        <feedback>
          Yes, we can start at 9 and copy the rest of the string
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><pf>s.substr(9, 4)</pf></p>
        </statement>
        <feedback>
          Yes, we can start at 9 and copy 4 characters
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>s.substr(-4)</pf></p>
        </statement>
        <feedback>
          We can't use negative indexes in C++ (some languages allow that)
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>