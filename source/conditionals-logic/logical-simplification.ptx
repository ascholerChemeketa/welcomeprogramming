<section xml:id="conditionals-logic_logical-simplification"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Simplifying Logical Expressions</title>

  <p>Many times, you can express the same logic in multiple ways. We have seen examples of this already. If <pf>isEven</pf> is a <pf>bool</pf> variable, these two expressions are equivalent:</p>

  <program>
if (isEven)
if (isEven == true)
  </program>

  <p>From mathematics, we know that <pf>&gt;</pf> is the opposite of <pf>&lt;=</pf>. So these two expressions are also equivalent:</p>

  <program>
if (x &gt; 5)
if (!(x &lt;= 5))
  </program>

  <p>In both of those cases, the first expression is easier to write and read and should be favored. If you find yourself writing something complex, stop and think about whether there is a simpler but logically equivalent expression.</p>

  <exercise label="conditionals-logic_logical-simplification-ex-1">
  <statement>
    <p>An easier way to write <pf>!(x != 10)</pf> is <fillin answer="x\\s*==\\s*10" mode="string"/>?</p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <strcmp>.*\(.*</strcmp>
          <feedback>
            You don't need parentheses.
          </feedback>
        </test>
        <test>
          <strcmp>.*!.*</strcmp>
          <feedback>
            You don't need any not symbols.
          </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

  <p> Sometimes you need to negate an expression containing a mix of relational and logical
    operators. For example, to test if <pf>x</pf> and <pf>y</pf> are both nonzero, you could write the
    following: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/logical-simplification-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>De Morgan's laws</h>
    </idx> This condition is difficult to read because of the <pf>!</pf>
    and parentheses. A better way to negate logic expressions is to apply <term>De Morgan's laws</term>
    :
<ul>
      <li>
        <p><pf>!(A &amp;&amp; B)</pf> <nbsp/>is the same as<nbsp/> <pf>!A || !B</pf></p>
      </li>
      <li>
        <p><pf>!(A || B)</pf> <nbsp/>is the same as<nbsp/> <pf>!A &amp;&amp; !B</pf></p>
      </li>
    </ul>
  </p>

  <p> In words, negating a logical expression is the same as negating each term and changing the
    operator. The <pf>!</pf> operator takes precedence over <pf>&amp;&amp;</pf> and <pf>||</pf>, so you don't have to
    put parentheses around the individual terms <pf>!A</pf> and <pf>!B</pf>. </p>

  <p> De Morgan's laws also apply to the relational operators. In this case, negating each term
    means using the <q>opposite</q> relational operator: <ul>
      <li>
        <p><pf>!(x &lt; 5 &amp;&amp; y == 3)</pf> <nbsp/>is the same as<nbsp/> <pf>x &gt;= 5 || y != 3</pf></p>
      </li>
      <li>
        <p><pf>!(x &gt;= 1 || y != 7)</pf> <nbsp/>is the same as<nbsp/> <pf>x &lt; 1 &amp;&amp; y == 7</pf></p>
      </li>
    </ul>
  </p>

  <p> It may help to read these examples out loud in English. For instance, <q>If I don't want the
    case where <m>x</m> is less than 5 and <m>y</m> is 3, then I need <m>x</m> to be greater than or
    equal to 5, or I need <m>y</m> to be anything but 3.</q>
  </p>

  <p> Returning to the previous example, here is the revised condition. In English, it reads, <q>If <m>
    x</m> is not zero and <m>y</m> is not zero.</q> The logic is the same, and the source code is
    easier to read: </p>

  <program>
<xi:include href="../../programs/conditionals-logic/logical-simplification-2.cpp" parse="text"/>
</program>

</section>