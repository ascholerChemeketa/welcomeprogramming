<section xml:id="conditionals-logic_extended-order-of-operations" xmlns:xi="http://www.w3.org/2001/XInclude">
<title>Extended order of operation</title>

    <p>The order of operations for arithmetic operators is something you were probably already familiar with from math class. But C++ has many more operators than that. To understand how the compiler will read an expression, we need to know the precedence (order) of them all. You can look up the full list in <url href="https://en.cppreference.com/w/cpp/language/operator_precedence">C++ references</url>, but here is a simplified version:
      <ol>
        <li>Parentheses (anything inside happens first)</li>
        <li>Unary operators with one operand: <pf>!</pf> or <pf>++</pf></li>
        <li>Arithmetic operators</li>
        <li>Comparison operators</li>
        <li>Logical operators</li>
        <li>Assignment</li>
      </ol>
    </p>

    <p>With this in hand, we can see how something like <pf>bool beforeChristmas = month &lt; 12 || (month == 12 &amp;&amp; day &lt; 25);</pf> is evaluated. Assume <pf>month = 12</pf> and <pf>day=26</pf>:</p>

    <ol>
    <li><title>Start inside the parens</title> <pf>bool beforeChristmas = month &lt; 12 || (<em>month == 12 &amp;&amp; day &lt; 25</em>);</pf></li>
    <li><title>Do the comparisons in the parens</title> <pf>bool beforeChristmas = month &lt; 12 || (<em>true</em> &amp;&amp; <em>false</em>);</pf></li>
    <li><title>Do the logical operator in the paren</title> <pf>bool beforeChristmas = month &lt; 12 || (<em>false</em>);</pf></li>
    <li><title>Do the comparison not in the parens</title> <pf>bool beforeChristmas = <em>false</em> || (false);</pf></li>
    <li><title>Do the logical operator</title> <pf>bool beforeChristmas = <em>false</em>;</pf></li>
    <li><title>Do the assignment</title></li>
    </ol>

    <p>This also explains why trying to write <pf>!x == 10</pf> does not calculate <q>x does not equal 10</q>. The <pf>!</pf> is evaluated first and only is applied to <pf>x</pf>. So we get <pf>!x</pf>. If x is a number, this just turns any value but 0 to 0 and turns 0 to 1. Then we compare that value to 10! To write that correctly we need to write <pf>!(x == 10)</pf> or <pf>x != 10</pf>.</p>

    <p>Within each category of operator, there may be a sub-hierarchy with its own order. We know that <pf>*</pf> comes before <pf>+</pf>. But it is also true that <pf>&amp;&amp;</pf> always comes before <pf>||</pf>. That means that we could write the expression above as <pf>month &lt; 12 || month == 12 &amp;&amp; day &lt; 25</pf>. The comparisons would happen first, then the <pf>&amp;&amp;</pf>, then the <pf>||</pf>. But the expression is much easier to read when the parentheses are there.</p>

    <insight>
      <p>When in doubt, use parentheses. They make your code easier to read and understand. Code that depends on every programmer correctly remembering each detail of the order of operations can easily result in bugs and make those bugs harder to spot.</p>
    </insight>

    <exercise label="conditionals-logic_extended-order-of-operations-ex-1">
      <statement>
        <p>Of the operators listed below, which is the FIRST operation that happens in this expression?</p>
        <program>bool result = e == f &amp;&amp; (a &lt; b || c &gt; d);</program>
      </statement>
      <choices randomize="yes">
        <choice correct="yes">
          <statement>
            <p>The || operator</p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p>The &amp;&amp; operator</p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p>The = operator (assignment)</p>
          </statement>
        </choice>
        </choices>
    </exercise>

</section>
