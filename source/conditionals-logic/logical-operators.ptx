<section xml:id="conditionals-logic_logical-operators"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Logical Operators</title>

  <introduction>
  <p>
    <idx>
      <h>logical operator</h>
    </idx>
    <idx>
      <h>operator</h>
      <h>logical</h>
    </idx>
    <idx>
      <h>and operator</h>
    </idx>
    <idx>
      <h>or operator</h>
    </idx>
    <idx>
      <h>not operator</h>
    </idx> In addition to the relational operators, C++ also has three <term>logical
    operators</term>: <pf>&amp;&amp;</pf>, <pf>||</pf>, and <pf>!</pf>, which respectively stand for <term>and</term>, <term>
    or</term>, and <term>not</term>. They are called <term>logical operators</term> because they operator on <q>logical</q> (Boolean) values. The results of these operators are similar to their meanings in
    English. For example: <ul>
      <li>
        <p><pf>x &gt; 0 &amp;&amp; x &lt; 10</pf> is true when <pf>x</pf> is greater than 0 <term>and</term> less than 10.</p>
      </li>
      <li>
        <p><pf>x &lt; 0 || x &gt; 10</pf> is true if either condition is true; that is, if <pf>x</pf> is less than 0 <term>or</term>
    greater than 10.</p>
      </li>
      <li>
        <p><pf>!(isEven)</pf> is true if <pf>isEven</pf> is <term>not</term> true (if it is false).</p>
      </li>
    </ul>
  </p>
</introduction>

  <subsection>
    <title>And</title>

    <p> In order for an expression with <pf>&amp;&amp;</pf> to be true, both sides of the <pf>&amp;&amp;</pf> operator must
      be true. The <pf>&amp;&amp;</pf> operator is equivalent to using nested <pf>if</pf> statements. For example,
      the following code:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/logical-operators-1.cpp" parse="text"/>
</program>

    <p>Is equivalent to this single if statement:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/logical-operators-2.cpp" parse="text"/>
</program>

    <p>If our goal is to have the one statement depend on testing both x and y, this version using
      <pf>&amp;&amp;</pf> is shorter and more clearly communicates our intent.</p>

    <p>We can even chain more than two conditions together using <pf>&amp;&amp;</pf>. For example:</p>

    <program>
if (x == 3 &amp;&amp; y >= 0 &amp;&amp; y &lt;= 10) {
  // do something because x is 3 and y is between 0 and 10
}
</program>

    <warning>
    <p>C++ does not allow compound conditions like you would write in math. In C++, <pf>0 &lt; x &lt; 10</pf> does NOT test to see if if x is between 0 and 10. Instead, it tests if 0 is less than x, and produces a result of 0 or 1 (true or false). It then tests that value to see if it is less than 10, which will always be true. You MUST write this as two conditions combined with &amp;&amp; like <pf>0 &lt; x &amp;&amp; x &lt; 10</pf>.
    </p></warning>

    <exercise label="conditionals-logic_logical-operators-ex-0">
      <statement>
        <p>What is the correct way to test if <pf>age</pf> is between 13 and 19?</p>
        </statement>
      <choices randomize="yes">
        <choice>
          <statement>
            <p><pf>13 &lt; age &lt; 19</pf></p></statement>
        </choice>
        <choice>
          <statement>
            <p><pf>age == 13-19</pf></p></statement>
        </choice>
        <choice correct="yes">
          <statement>
            <p><pf>13 &lt; age &amp;&amp; age &lt; 19</pf></p></statement>
        </choice>
      </choices>
  </exercise>
</subsection>
  <subsection>
    <title>Or</title>

    <p>In order for an expression with <pf>||</pf> to be false, both sides of the <pf>||</pf> operator must
      be false. If either part is true, the entire expression is true.</p>

    <p>The <pf>||</pf> operator can simplify our logic where multiple different tests all should result
      in the same behavior. For example, there are two ways for this code to print the message:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/logical-operators-3.cpp" parse="text"/>
</program>

    <p>But we can combine the two conditions into one using <pf>||</pf>:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/logical-operators-4.cpp" parse="text"/>
</program>

    <warning>
    <p>C++ also does not allow us to directly translate <q>x is equal to 3 or 4</q> as <pf>x == 3 || 4</pf>. Instead, you must write <pf>x == 3 || x == 4</pf>. The first expression would be interpreted as <pf>x == 3</pf> or <pf>4</pf>. Since <pf>4</pf> is always true, the expression would always be true.
    </p></warning>

    <insight><p>The expression on each side of <pf>||</pf> or <pf>&amp;&amp;</pf> MUST be a complete boolean expression that will evaluate to <pf>true</pf> or <pf>false</pf>.</p></insight>

    <exercise label="conditionals-logic_logical-operators-ex-1">
      <statement>
        <p>What is the correct way to test if <pf>age</pf> is either 18, 19, or 20?</p>
        </statement>
      <choices randomize="yes">
        <choice correct="yes">
          <statement>
            <p><pf>age == 18 || age == 19 || age == 20</pf></p>
          </statement>
        </choice>
        <choice>
          <statement>
            <p><pf>age == 18 || 19 || 20</pf></p></statement>
        </choice>
        <choice>
          <statement>
            <p><pf>age == 18-20</pf></p></statement>
        </choice>
      </choices>
  </exercise>

  </subsection>


  <subsection>
    <title>Not</title>

    <p>The <term>not</term> operator <pf>!</pf> is used to produce the opposite of a boolean value. It can be used directly on boolean variables as shown in this sample:</p>

    <program>
bool isEven = true;
if (!isEven) {
    // we know it's odd...
</program>

  <p>That if statement is equivalent to <pf>if (isEven == false)</pf>, but most programmers prefer the version using <pf>!</pf>.
  </p>
  <p>It can also be used to reverse the value calculated by some other logical operation. For example, to test if <pf>health</pf> is not less than 0 we could do: <pf>!(health &lt; 0)</pf>. Notice that we need the parentheses to make it clear that we want to FIRST calculate <q>is health less than 0</q> and then calculate the opposite of that value. Of course we could also write that expression as <pf>(health &gt;= 0)</pf> which might more clearly express what we are looking for.</p>
  </subsection>

  <subsection>
    <title>Short Circuit Evaluation</title>
    <p>
      <idx>
        <h>short circuit</h>
      </idx> Logical operators evaluate the second expression <term>only
      when necessary</term>. For example, <pf>true || anything</pf> is always true, so C++ does not need to evaluate
      the expression <pf>anything</pf>. Likewise, <pf>false &amp;&amp; anything</pf> is always false. </p>

    <p>Ignoring the second operand, when possible, is called <term>short-circuit</term> evaluation,
      by analogy with an electrical circuit. Short-circuit evaluation can save time, especially if <pf>anything</pf> (the second operand)
      takes a long time to evaluate.</p>
    
      <p>It can also avoid unnecessary errors, if <pf>anything</pf> might fail.
      For example, dividing an integer by 0 is a runtime error that will stop a program. This code
      avoids that by testing <pf>b</pf> before dividing <pf>a</pf> by it. If <pf>b</pf> is 0, then the <pf>b != 0</pf> is false
      and the second clause which involves division never gets executed.</p>

      <p>Try running the program (it is set to use inputs of 3 and 0 for a and b). Then delete the <pf>b != 0 &amp;&amp; </pf> part of the condition. Now there is nothing that prevents dividing by 0! Try running the program again to see the error that results.</p>

    <listing>
    <program label="conditionals-logic_logical-operators-program-1"
             interactive="activecode">
<code>
<xi:include href="../../programs/conditionals-logic/logical-operators-5.cpp" parse="text"/>
</code>
<stdin>3 0</stdin>
  </program>
    </listing>

    <p>Normally you don't have to worry about short circuit evaluation (other than possibly to use
      it as a guard). But if the second part of a conditional has a <term>side effect</term><mdash/>if
      it changes some value<mdash/>, the logic can be tricky to follow:</p>

    <program>
if (x &gt; 0 || y++ &gt; 0) {
  // do something
}
    </program>

    <p>Here, if <pf>x</pf> is greater than 0, the <pf>y++</pf> is never executed. But if <pf>x</pf> is less than or equal
      to 0, then <pf>y</pf> is incremented. It would be easy to expect that <pf>y</pf> always increases. A good
      rule of thumb is to avoid doing anything in a complex conditional that has a side effect.</p>

  </subsection>

   <exercise label="conditionals-logic_logical-operators-ex-1b">
    <statement>
      <p>Multiple Response: How could you re-write the following code using a single conditional?</p>
      <program>if (x &gt; 0) {
  if (x &lt; 10) {
    cout &lt;&lt; "x is a positive single digit" &lt;&lt; endl;
  }
}</program>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p><![CDATA[if (x > 0 && x < 10) {...]]></p>
        </statement>
        <feedback>
          This is exactly what the nested conditionals are saying.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><![CDATA[if (x > 0 || x < 10) {...]]></p>
        </statement>
        <feedback>
          || represents "or", but we need both sides of the conditional to be true.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><![CDATA[if (x > 0 ! x < 10) {...]]></p>
        </statement>
        <feedback>
          The ! operator cannot be used to compare two sides of a conditional.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><![CDATA[if ( !(x < 0) && !(x > 10) ) {...]]></p>
        </statement>
        <feedback>
          If x = 0 or if x = 10, this expression will return true when it shouldn't.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><![CDATA[if ( !(x <= 0) && !(x >= 10) ) {...]]></p>
        </statement>
        <feedback>
          If it IS NOT what we don't want, then it IS what we want!
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="conditionals-logic_logical-operators-ex-2">
    <statement>
      <p>Match the conditional statement to the correct boolean and the meaning of the operator in
        use, given n = 7.</p>
    </statement>
    <feedback>
      Try again!
    </feedback>
    <cardsort>
      <match>
        <premise>(n * 2 &gt; 10 &amp;&amp; n &gt;= 7)</premise>
        <response>true, "and"</response>
      </match>
      <match>
        <premise>(n * 2 &gt; 10 &amp;&amp; n &lt; 7)</premise>
        <response>false, "and"</response>
      </match>
      <match>
        <premise>(n%2 == 1 || n == 8)</premise>
        <response>true, "or"</response>
      </match>
      <match>
        <premise>(n%2 == 0 || n == 8)</premise>
        <response>false, "or"</response>
      </match>
      <match>
        <premise>!(n == 7)</premise>
        <response>false, "not"</response>
      </match>
      <match>
        <premise>!(n &gt;= 10)</premise>
        <response>true, "not"</response>
      </match>
    </cardsort>
  </exercise>
  <exercise label="conditionals-logic_logical-operators-ex-3">
    <statement>
      <p>Add a single logical operator to make the expression check if x is greater than or
        equal to 50</p>
      <p><fillin mode="string" case="insensitive" answer="[!]"/> <pf>( x &lt; 50 )</pf></p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
          <feedback>
            If the expression checks for the opposite of what you want then just <pf>!</pf> the
              result
          </feedback>
        </test>
      </evaluate>
    </evaluation>
    <hint>We want the opposite of the condition that is listed - <q>NOT (x &lt; 50)</q>.</hint>
  </exercise>
</section>