<section xml:id="conditionals-logic_if-statement"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>The if Statement</title>

  <introduction>
    <p>
      <idx>
        <h>conditional statement</h>
      </idx>
    <idx>
        <h>statement</h>
        <h>conditional</h>
      </idx>
    <idx>
        <h>if statement</h>
      </idx>
    <idx>
        <h>statement</h>
        <h>if</h>
      </idx>Now that we have boolean values, we need to use them to control what
      code gets executed. <term>Conditional statements</term> give us this ability. The simplest
      conditional statement in C++ is the <pf>if</pf> statement: </p>

      <p>An if statement consists of <pf>if</pf>, followed by an expression in parentheses, followed by a block of code. The expression is used to determine whether the block of code should be executed.</p>

    <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1.cpp" parse="text"/>
</program>
  </introduction>

  <subsection>
    <title>The condition</title>
    <p>
      <idx>
        <h>block</h>
      </idx> The expression in parentheses is called the <term>condition</term>
      and must be a variable or expression with a boolean value. If it is true, the statements in
      the curly braces get executed. That group of statements in the braces is known as the <term>
      body</term>. If the condition is false, execution skips over the <term>body</term>.</p>

  <figure>
    <caption>Flow of execution for an <pf>if</pf> statement.</caption>
    <image width="60%"
           source="images/control-if.svg"
           >
      <shortdescription>Flowchart showing the structure of an if statement.</shortdescription>
    </image>
  </figure>

    <p>Try running this sample in Codelens. Notice that only one of the three conditions is true and
      that the bodies of the other two conditionals get skipped.</p>

    <listing>
    <program label="conditionals-logic_if-statement-program-1"
             interactive="codelens">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1a.cpp" parse="text"/>
</program>
    </listing>


    <p>The <term>condition</term> can be any value that evaluates to <pf>true</pf> or <pf>false</pf>. Because
      numbers can evaluate as true or false (with 0 being false and all other numbers being true),
      that means it is possible, but generally not advisable, to write something like this: </p>

    <program>
    int x = 5;
    if (x) {
        cout &lt;&lt; "x is truish" &lt;&lt; endl;
    }
  </program>

    <p>It also means that it is legal to use a variable of type <pf>bool</pf> without a comparison, as
      it already has a value of <pf>true</pf> or <pf>false</pf>:</p>

    <listing>
    <program>
    int x = 5;
    bool isEven = (x % 2 == 0);
    if (isEven) {
        cout &lt;&lt; "x is even" &lt;&lt; endl;
    }
  </program>
    </listing>

    <p>This way of testing a boolean variable is generally preferred to comparing it to true.
      Writing <pf>if (isEven == true)</pf> would do the same thing, but is redundant.</p>

    <warning>
      <p>
        <idx>
          <h>assignment</h>
        </idx>
    <idx>
          <h>operator</h>
          <h>assignment</h>
        </idx>
    <idx>
          <h>== equals operator</h>
        </idx>Remember that a single <pf>=</pf> represents
        assignment - it says <q>gets the value</q>. A double equals <pf>==</pf> asks the question <q>is
        equal to?</q>.</p>
        <p>A common mistake is to use a single <pf>=</pf> instead of a double <pf>==</pf>
        when comparing values. If you make this mistake, the compiler will emit a warning like the
        one shown below that tells you you are using an assignment operator in a place where a
        true/false value is expected. </p>
      <console>
        <output>test.cpp:7:10: error: suggest parentheses around assignment used as truth value [-Werror=parentheses]
    7 |     if( x = 0 ) {
      |          ~^~~</output>
      </console>
    </warning>

  </subsection>
  <subsection>
    <title>The body</title>

    <p>The <term>body</term> is the code that gets conditionally. Although above we have shown the body in braces (<pf>{ }</pf>), those are not strictly required if the body is only a single statement:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1b.cpp" parse="text"/>
</program>

    <p>The braces serve to define a <term>block</term> that groups multiple statements into a single one. If we want to have two statements that are both part of the body of the if, they must be made into a block with <pf>{ }</pf>:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1b2.cpp" parse="text"/>
</program>

    <p>By convention, we indent the code that is inside a condition, whether or not it is inside
      braces, to clearly show that it is <q>inside</q> the body of the <pf>if</pf>. The compiler does
      not care if you indent or not, but indenting blocks makes code much easier to read.</p>

    <p>Because indentation signals <q>this is inside</q> to programers, but it meaningless to the
      compiler, it can be dangerous to skip braces, even when they are optional. Doing so
      makes it easy to accidentally add a statement to a one-line <pf>if</pf> block.</p>

    <listing>
    <program label="conditionals-logic_if-statement-program-2"
             extra-compiler-args="-Wno-misleading-indentation"
             interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-4.cpp" parse="text"/>
</program>
    </listing>

    <p>With a modern compiler, you likely will get a warning about that code. But it is possible to silence the warning (like we have here) and run the code anyway.</p>

    <p>Since there are no braces, only the first <pf>cout</pf> is part of the <pf>if</pf> statement. Here
      is a more accurate representation of what the compiler sees:</p>

    <listing>
    <program label="conditionals-logic_if-statement-program-3"
             interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-5.cpp" parse="text"/>
</program>
    </listing>

    <p>The indentation in the first version was misleading. The second print statement is not a part
      of the body, and as a result, it runs no matter what! Try running the sample above. Then indent the second print statement to line up with the first and run the code again. This time you should see a warning.</p>
      
    <p>Although the compiler may try to save you with a warning, this is an easy mistake to make. Thus it is a good idea to always use braces, even for one line bodies.</p>

    <p>
      <idx>
        <h>\{\} curly braces</h>
      </idx> In all previous examples, notice that there is no
      semicolon at the end of the line with <pf>if (condition)</pf>. That is because the body is technically part
      of the same statement. This is valid C++:</p>

    <program>
<xi:include href="../../programs/conditionals-logic/ifelse-statement-1c.cpp" parse="text"/>
</program>

    <p>But the strong convention is to write the body on a line by itself. However, it is all still one statement and there should not be a semicolon at the end of the line with the <pf>if</pf> condition. 
      If you put a semicolon after the condition, like this:</p>

    <program label="conditionals-logic_if-statement-program-4">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-7b.cpp" parse="text"/>
</program>

    <p>The compiler sees an <pf>if</pf> statement with no body, followed by a block of code that is not a part
      of the conditional. It sees something more like:</p>

    <program label="conditionals-logic_if-statement-program-5">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-7.cpp" parse="text"/>
</program>

    <p>Again, a modern compiler should offer warnings for this situation. Here, we have left the warnings enabled:</p>

    <listing>
    <program label="conditionals-logic_if-statement-program-6"
             interactive="activecode">
<xi:include href="../../programs/conditionals-logic/ifelse-statement-6.cpp" parse="text"/>
</program>
    </listing>

<insight><p>Make sure you know how to enable warnings for your compiler. Then pay attention to them! Most warnings are actually errors.</p></insight>

  </subsection>

  <exercise label="conditionals-logic_if-statement-ex-1">
    <statement>
      <p>Observe the code below. <q>Bigger</q> doesn't print! How can you modify this so that all of
        the statements print?</p>
      <program>
      <code><![CDATA[
    int x = 12;
    if (x == 12) {
        cout << "Equal!" << endl;
    }
    if (x != 13) {
        cout << "Not equal!" << endl;
    }
    if (x < 6) {
        cout << "Bigger!" << endl;
    }
        ]]></code>
    </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>Change the value of x to be anything less than 6.</p>
        </statement>
        <feedback> While "Bigger" would now print, the other two statements would not! </feedback>
      </choice>
      <choice>
        <statement>
          <p>Change the value of x to 13.</p>
        </statement>
        <feedback> Now, none of the statements would print! </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Change the sign of the last conditional statement to x &gt; 6.</p>
        </statement>
        <feedback> Now, all of the statements would print. </feedback>
      </choice>
      <choice>
        <statement>
          <p>Change the value of the return from 0 to "Bigger!"</p>
        </statement>
        <feedback> main returns an int, so trying to make it return a string will cause an error. </feedback>
      </choice>
    </choices>
  </exercise>


  <exercise label="conditionals-logic_if-statement-ex-2">
    <statement>
      <p>What will print?</p>
      <program>int n = 16;
int x = 4;

bool evenFlag = (n % 2 == 0);
bool plusFlag = (x &gt; 0);

if (evenFlag) {
  cout &lt;&lt; "n was even when I checked it ";
}

if (plusFlag) {
  cout &lt;&lt; "x was positive when I checked it";
}</program>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>n was even when I checked it x was positive when I checked it</p>
        </statement>
        <feedback> Great! </feedback>
      </choice>
      <choice>
        <statement>
          <p>x was positive when I checked it n was even when I checked it</p>
        </statement>
        <feedback> Make sure you follow the correct order of execution. Also, a space is not
          automatically added. </feedback>
      </choice>
      <choice>
        <statement>
          <p>x was positive when I checked it</p>
        </statement>
        <feedback> Take another look at the result from the modulus operator. </feedback>
      </choice>
      <choice>
        <statement>
          <p>n was even when I checked itx was positive when I checked it</p>
        </statement>
        <feedback> Both flags are made, But A space is after it. </feedback>
      </choice>
      <choice>
        <statement>
          <p>x was positive when I checked itn was even when I checked it</p>
        </statement>
        <feedback> Make sure you follow the correct order of execution. </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="conditionals-logic_if-statement-ex-3">
    <statement>
      <p>What will print?</p>
      <program>bool low_battery=true;
bool power_outage=true;

if (low_battery) {

  if (power_outage) {
      power_outage=!power_outage;
  }
  else{
      low_battery=false;
  }

  if (!power_outage) {

    if (low_battery) {
        cout &lt;&lt; "Charging your phone" &lt;&lt; endl;
    }
    else{
        cout &lt;&lt; "Battery is charged" &lt;&lt; endl;
    }

  }
  else{
    cout &lt;&lt; "There is no power" &lt;&lt; endl;
  }
}</program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>nothing will print</p>
        </statement>
        <feedback> The value of <pf>low_battery</pf> is true so we enter the first <pf>if</pf> block. </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <q>Charging your phone</q>
          </p>
        </statement>
        <feedback> correct! <pf>low_battery</pf> stays true and we set <pf>power_outage</pf> to false. </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <q>Battery is charged</q>
          </p>
        </statement>
        <feedback>
          <pf>low_battery</pf> is true so we don't reach this <pf>else</pf>. </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <q>There is no power</q>
          </p>
        </statement>
        <feedback> We change the value of <pf>power_outage</pf> to false before hand. </feedback>
      </choice>
    </choices>
  </exercise>

</section>