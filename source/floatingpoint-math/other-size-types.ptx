<section xml:id="floatingpoint-math_other-size-types"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Other Size Types</title>

  <introduction>

    <note>
      <p>Unless you are reading this book as part of a class that instructs you otherwise, you
        should not worry about memorizing the different numeric types and their sizes. It is important to
      understand that there are </p>
    </note>

    <p>All data needs to be stored as bits (as a sequence of 0's and 1's). Those sequences are
      always a fixed size. For instance, an <pf>int</pf> is typically 32 bits. This means that an <pf>int</pf>
      can store <m>2^{32}</m> different values. That is enough different values to represent the
      numbers -2,147,483,648 to 2,147,483,647. (For more on how this actually works, as well as how
      floating point values are represented in binary, see <url href="https://author.runestone.academy/ns/books/published/welcomecs2/data-representation_data-representation.html?mode=browsing">Welcome
      to CS</url> Data Representation chapter)</p>
  </introduction>

  <subsection>
    <title>Integer types</title>

    <p>For integer values, the number of bits determines the largest and smallest values that can be
      stored. Exceeding this range leads to integer overflow or underflow, resulting in incorrect
      calculations or unexpected behavior as seen in this program:</p>

    <listing xml:id="floatingpoint-math_other-size-types-program-1-listing">
      <program label="floatingpoint-math_other-size-types-program-1"
               interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/other-size-types-1.cpp" parse="text"/>
</program>
    </listing>

    <p>The program tries to calculate 2 * 2,000,000,000. But that result is larger than the largest
      possible <pf>int</pf>, so the number <q>wraps around</q> after reaching the largest possible
      value (2,147,483,647) to the lowest possible value (-2,147,483,648). The result is
      -294,967,296.</p>

    <p>So how do you store a value greater than 2,147,483,647? You use a data type that employs more
      bits to store an integer value. The following data types can be used instead of <pf>int</pf> to
      store integer values: </p>

    <table>
      <title>Sized integer types</title>
      <tabular halign="center">
        <row header="yes"
             bottom="major">
          <cell>Type</cell>
          <cell>Bits</cell>
          <cell>Range</cell>
        </row>
        <row>
          <cell>
            <pf>int8_t</pf>
          </cell>
          <cell>8</cell>
          <cell>-128 - 127</cell>
        </row>
        <row>
          <cell>
            <pf>int16_t</pf>
          </cell>
          <cell>16</cell>
          <cell>-32,768 - 32,767</cell>
        </row>
        <row>
          <cell>
            <pf>int32_t</pf>
          </cell>
          <cell>32</cell>
          <cell>-2,147,483,648 - 2,147,483,647</cell>
        </row>
        <row>
          <cell>
            <pf>int64_t</pf>
          </cell>
          <cell>64</cell>
          <cell>-9,223,372,036,854,775,808 - 9,223,372,036,854,775,807</cell>
        </row>
      </tabular>
    </table>

    <p>Try changing the type of the variable <pf>x</pf> in <xref ref="floatingpoint-math_other-size-types-program-1-listing"/> to <pf>int64_t</pf> and see what happens. Since the variable can now safely store 4,000,000,000, the program should produce the correct result.</p>

    <p>The smaller types, such as <pf>int8_t</pf> and <pf>int16_t</pf>, are useful when you want to save memory or when you know the values will not exceed their range. In a short program storing a few values, there is no real advantage to storing a value as an <pf>int8_t</pf> instead of an <pf>int</pf>. But if you were storing millions of values, the smaller types could save a significant amount of memory.</p>

    <note>
      <p>The intXX_t types are relatively new in C++. There are also older types like <pf>short</pf>, <pf>long</pf>,
        and <pf>long long</pf>. We will avoid these completely as the exact size of each is determined by the
        compiler - a <pf>long</pf> can use a different number of bits on different platforms! The same
        is also true of <pf>int</pf>, so if you want to guarantee your variables are store with 32
        bits, you need to use <pf>int32_t</pf>.</p>
    </note>
  </subsection>

  <subsection xml:id="floatingpoint-math_other-size-types-unsigned">
    <title>Unsigned types</title>

    <p>Sometimes, we don't care about storing negative values. If so, using some of the
      representational power of our bits on negative values is a waste. So C++ provides <term>
      unsigned</term> integer types that only store 0 and positive values. This means that with the
      same number of bits, you can store a value twice as large.</p>

    <table>
      <title>Unsized integer types</title>
      <tabular halign="center">
        <row header="yes"
             bottom="minor">
          <cell>Type</cell>
          <cell>Bits</cell>
          <cell>Range</cell>
        </row>
        <row>
          <cell>
            <pf>uint8_t</pf>
          </cell>
          <cell>8</cell>
          <cell>0 - 255</cell>
        </row>
        <row>
          <cell>
            <pf>uint16_t</pf>
          </cell>
          <cell>16</cell>
          <cell>0 - 65,535</cell>
        </row>
        <row>
          <cell>
            <pf>uint32_t</pf>
          </cell>
          <cell>32</cell>
          <cell>0 - 4,294,967,295</cell>
        </row>
        <row>
          <cell>
            <pf>uint64_t</pf>
          </cell>
          <cell>64</cell>
          <cell>0 - 18,446,744,073,709,551,615</cell>
        </row>
      </tabular>
    </table>

    <p>The unsigned types are useful for squeezing more positive range out of the same number of bits. They are also useful in situations where we want to prevent a negative value from being stored.</p>

    <p>These types are defined in the <pf>&lt;cstdint></pf> library and you might need to include that to make use of them.</p>
  </subsection>

  <subsection>
    <title>Floating point types</title>

    <p>For floating point types, the number of bits determines not just the maximum and minimum
      values we can represent, but the number of digits of accuracy we can count on. A <pf>double</pf> is
      generally 64 bits, in which case it can store from about <m>1.7 × 10^{-308}</m> to <m>1.7 ×
      10^{308}</m> with about 15 digits of precision.</p>

    <p>It should be clear that there is much less risk of <q>running out of room</q> when using a
      double. <m>1.7 ×
      10^{308}</m> is a very large number. However, a <pf>double</pf> also has the limit of ~15 digits of precision and that might be a concern. If you need to represent larger values or have more precision, there is the <pf>long double</pf>
      which may, depending on the platform use more bits to represent a floating point value and thus have more accuracy.</p>
    <p>Occasionally, if your program is storing large numbers of floating point values (thousands of
      them) and does not need the full accuracy of a <pf>double</pf>, you might chose to use <pf>single</pf>s
      instead. A <pf>single</pf> which will generally use 32 bits and provide about 7 digits of accuracy. As with the integer type <pf>int8_t</pf>, this is mostly useful when storing large numbers of values that are known to be within a limited range.</p>

    <note>
      <p>The C++23 standard introduced standardized floating point types with fixed sizes from 8 to
        64 bits, but we will not discuss them.</p>
    </note>
  </subsection>

  
  <exercise label="floatingpoint-math_other-size-types-ex-1">
    <statement>
      <p>What is the largest value that can be stored in a 32 bit signed (normal) integer? Give the answer with commas in the number. <fillin mode="string"
                answer="2,147,483,647"/>? </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  
  <exercise label="floatingpoint-math_other-size-types-ex-2">
    <statement>
      <p>What is the largest value that can be stored in an 8 bit unsigned integer? <fillin mode="string"
                answer="255"/>? </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>


</section>