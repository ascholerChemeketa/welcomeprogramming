<section xml:id="floatingpoint-math_case-study-point-rotation"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Case Study: Point Rotation</title>


  <subsection>
    <title>The problem</title>

    <p>When drawing graphics, computers generally work with polygons defined by points. To draw an
      object as if it is far away, or rotated, the computer can transform the points before drawing
      the shape. We want to do a simple version of transforming a point. Given the point A at (2,
      4), we would like to write a program that says where that point ends up if it is rotated by a
      certain number of degrees (<m>θ</m> - pronounced <q>theta</q>) around the origin (0, 0).</p>

    <p>The figure below illustrates what we are trying to do. Use the slider to change <m>θ</m>, and
      it will show you the new location of A as A'.</p>

    <figure>
      <caption>Rotation of the point <m>A (2, 4)</m>. Drag the <m>θ</m> slider to see the point
        rotate around the origin.</caption>
      <interactive xml:id="geogebra-astroid-original"
                   platform="geogebra"
                   width="100%"
                   aspect="3:2">
        <slate xml:id="train-distance"
               surface="geogebra"
               material="sxwtxdyu"
               aspect="3:2"/>
      </interactive>
    </figure>
  </subsection>

  <subsection>
    <title>Making a Plan</title>
    <p>Let us start with the same questions as last time:</p>

    <p>
      <dl>
        <li>
          <title>
            <q>
              <em>What data you will start with?</em>
            </q>
          </title>
          <p>a number of degrees</p>
        </li>

        <li>
          <title>
            <q>
              <em>What values you want to calculate?</em>
            </q>
          </title>
          <p>x and y position after (2, 4) is rotated</p>
        </li>

        <li>
          <title>
            <q>
              <em>How will you calculate those values?</em>
            </q>
          </title>
          <p>Some searching revealed these formulas: <md>
              <mrow>x' = x * cos(θ) - y * sin(θ)</mrow>
              <mrow>y' = x * sin(θ) + y * cos(θ)</mrow>
            </md>
          </p>
        </li>
      </dl>
    </p>

    <p>Before we start writing code, we should test these formulas. We can do that by hand. If we
      rotate the point (2, 4) by 90 degrees, I get (-4, 2). If we rotate it by 45 degrees, we should
      get (-1.41, 4.24). Those values seem to match what the animation shows. This confirms that we
      know how to do the math and will allow us to check the results of our code.</p>
  </subsection>

  <subsection>
    <title>Checking Our Tools</title>

    <p>If we haven't used a function like <pf>sin</pf> before, it makes sense to test it out and ensure
      that we know that it works correctly. So I am going to start with that. I will not worry about
      reading input yet, I will just hard code in a test value. Here is my first attempt:</p>

    <listing>
      <program label="floatingpoint-math_case-study-point-rotation-program-1"
               line-numbers="yes"
               interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-1.cpp" parse="text"/>
      </program>
    </listing>

    <p>Although 45 could be stored into an int, there is no reason <pf>theta</pf> needs to be a whole
      number. So it makes sense to use a <term>double</term> as its type. And I can't use the
      symbol, so I have spelled out its name.</p>

    <p>When I run this program, I get <pf>sinValue: 0.850904</pf>. That does not look right. I expected to get
      approximately 0.707.</p>

    <p>The <pf>sin</pf> function in C++ expects the angle to be in radians, not degrees. So I need to
      convert the degrees to radians before I can use the <pf>sin</pf> function. I can do that by
      multiplying the degrees by <m>π/180</m>. Here is my next attempt:</p>

    <listing>
      <program label="floatingpoint-math_case-study-point-rotation-program-2"
               line-numbers="yes"
               interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-2.cpp" parse="text"/>
      </program>
    </listing>

    <p>Note that since π should never change, I have made it a <pf>const double</pf>. And, as is convention for
      constants, I have named it using all uppercase. I have also renamed what used to be <pf>theta</pf>
      to <pf>thetaDegrees</pf> to clearly indicate what it stores and differentiate it from <pf>thetaRadians</pf>.</p>

    <p>This version seems to work better. Now I feel confident about trying to solve the actual
      problem.</p>
  </subsection>

  <subsection>
    <title>Calculating x2</title>

    <p>Now let's try to calculate the new location of x. In the formula, it is written as <m>x'</m>
      (pronounced <q>x prime</q>) but we can't use that symbol in a variable name, so we will call
      it <pf>x2</pf>. I also need to set some values for the original x and y.</p>

    <listing>
      <program label="floatingpoint-math_case-study-point-rotation-program-3"
               line-numbers="yes"
               interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-3.cpp" parse="text"/>
      </program>
    </listing>

    <p>This seems to work, or at least the answer matches what I calculated by hand.</p>


    <exercise label="floatingpoint-math_case-study-point-rotation-ex-1">
      <statement>
        <p>What is the exact value that is printed for x2? <fillin mode="string"
                  answer="-1.41421"/></p>
      </statement>
      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes"/>
          </test>
          <test>
            <feedback>
              <p>You should have a negative number with 5 decimal places.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </exercise>
  </subsection>

  <subsection>
    <title>Calculating y2</title>

    <p>Now let's add code to calculate y2. Add the following two lines to the program above (right
      after the lines that calculate <pf>x2</pf>) and then run it.</p>

    <listing>
      <program>
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-4.cpp" parse="text"/>
      </program>
    </listing>

    <exercise label="floatingpoint-math_case-study-point-rotation-ex-2">
      <statement>
        <p>What is the exact value that is printed for y2? <fillin mode="string"
                  answer="4.24264"/></p>
      </statement>
      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes"/>
          </test>
          <test>
            <feedback>
              <p>You should a number with 5 decimal places.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </exercise>

  </subsection>

  <subsection>
    <title>Wrapping up</title>

    <p>Now that we have the code working, we can add code to read in the value of theta from the
      user. Here is the final version of the program:</p>

    <listing>
      <program label="floatingpoint-math_case-study-point-rotation-program-4"
               line-numbers="yes"
               interactive="activecode">
<code>
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-5.cpp" parse="text"/>
</code>
<stdin>45.0</stdin>
      </program>
    </listing>

    <p>We might also choose to condense the code a bit. We could avoid storing the variables <pf>sinValue</pf>
      and <pf>cosValue</pf> by calculating sin and cos of theta where they are needed like this:</p>
    <listing>
    <program >
<xi:include href="../../programs/floatingpoint-math/case-study-point-rotation-6.cpp" parse="text"/>
      </program>
    </listing>

    <p>However, I am choosing to leave them in place. Using the variables makes it easier to go back
      and check the values of those calculations if I realize there is a bug. It also avoids redoing
      the work of calculating sin and cos of theta.</p>

    <note>
      <p>Again, we have worked on this program one piece at a time. This is the most effective way
        to write code. Write a bit, test what you have, and do not continue building on that until
        you are sure it is working.</p>
    </note>
  </subsection>

  <exercise label="floatingpoint-math_case-study-point-rotation-ex-3">
    <statement>
      <p>Run the final version with theta of 120. What is the exact value that is printed for y2? <fillin mode="string"
                answer="-0.267949"/></p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
        <test>
          <feedback>
            <p>You should have a negative number with 5 decimal places.</p>
          </feedback>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>