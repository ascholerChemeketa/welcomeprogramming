<section xml:id="floatingpoint-math_type-cast-operators"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Type Casting</title>

  <p>As mentioned earlier, C++ converts <pf>int</pf>'s to <pf>double</pf>'s automatically if necessary, because
    no information is lost in the translation. On the other hand, going from a <pf>double</pf> to an <pf>int</pf>
    requires truncating the value and produces a warning.</p>

  <p>
    <idx>
      <h>typecast</h>
    </idx>To remove this warning, you can do a <term>typecast</term>.
    Typecasting is so called because it allows you to take a value that belongs to one type and <q>
    cast</q> it into another type (in the sense of molding or reforming, not throwing).</p>

  <p><idx>
      <h>explicit conversion</h>
    </idx>
  <idx>
      <h>cast</h>
      <h>explicit</h>
    </idx>In C++, the way ask the compiler to do a typecast is to write <pf>static_cast&lt;TYPE&gt;(VALUE)</pf>.
    When you write that, you are essentially saying <q>I know this looks potentially dangerous, but
    please go ahead and convert VALUE to type TYPE and do not warn me about it.</q> This is known as
    an <term>explicit conversion</term> because you are explicitly (visibly) doing the cast. Here is
    an example of an explicit conversion of a double value to the int type using <pf>static_cast&lt;int&gt;(VALUE)</pf>:</p>

  <program interactive="activecode"
            label="floatingpoint-math_type-cast-operators-program-1"
           line-numbers="yes">
<xi:include href="../../programs/floatingpoint-math/type-cast-operators-1.cpp" parse="text"/>
</program>

  <p>Note that the <pf>static_cast</pf> does not change the value of the variable <pf>pi</pf>. it makes a copy of the
    value and converts it to the new type (<pf>int</pf>). The result is exactly the same as if we wrote <pf>int x = pi;</pf>
    on line 7 except there is no warning!</p>

  <insight>
  <p>A <pf>static_cast</pf> does a conversion the compiler already knows how to do but would normally either
      not do or issue a warning for.</p>
  <p>Using <pf>static_cast</pf> clearly communicates to both the compiler and other programmers that you are intentionally doing a potentially dangerous conversion (and thus hopefully are aware of the consequences!)</p>
  </insight>

  <p>It is possible to type cast an integer value into a double using <pf>static_cast&lt;double&gt;(VALUE)</pf>. Normally, it is not necessary to do
    so as the compiler will implicitly do the conversion without complaining. But sometimes it is
    useful to cast an integer to a double in order to force floating-point math. The following
    example does this to get a decimal answer for 1/3 in the second line of output:</p>

  <program interactive="activecode"
            label="floatingpoint-math_type-cast-operators-program-2"
           line-numbers="yes">
<xi:include href="../../programs/floatingpoint-math/type-cast-operators-2.cpp" parse="text"/>
  </program>

  <p>As the line is evaluated, the <pf>static_cast</pf> happens first. It converts <pf>1</pf> to <pf>1.0</pf>. Then the
    division takes place and it now says <pf>1.0 / 3</pf>. Since there is at least one floating-point value
    involved, C++ does floating-point math.</p>

  <note>
    <p>In C programming, you cast by writing something like <pf>int x = (int)pi;</pf>. Although C-style casts can also
      be written in C++, you should avoid using them.</p>
  </note>
  
  
  <exercise label="floatingpoint-math_type-cast-operators-ex-1a">
            language="cpp">
    <statement>
      <p>Build code to turn the value in <pf>double x</pf> to an <pf>int</pf> using <pf>static_cast</pf> and store the result into <pf>int y</pf>.</p>
    </statement>
    <blocks layout="horizontal"
            randomize="yes">
      <block><c>int y</c></block>
      <block><c>=</c></block>
      <block><c>static_cast</c></block>
      <block><c>&lt;</c></block>
      <block><c>int</c></block>
      <block><c>&gt;</c></block>
      <block><c>(x);</c></block>
    </blocks>
  </exercise>

  
  <exercise label="floatingpoint-math_type-cast-operators-ex-2">
    <statement>
      <p><term>Multiple Response</term> Select all variables that have a <em>non-zero</em> value
        after the decimal place. (3.1 has a <em>non-zero</em> value, while 3.0 and 3 do not)</p>
      <program>#include &lt;iostream&gt;
using namespace std;

int main() {
  int a = 1.5;
  double b = a + 1.5;
  double c = 2.4;
  double d = 1/5;
  int e = c * c;
  double f = static_cast&lt;int&gt;(c);
}</program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>
            <pf>a</pf>
          </p>
        </statement>
        <feedback>
          C++ performs automatic type conversion to round 1.5 down to the
            nearest integer.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <pf>b</pf>
          </p>
        </statement>
        <feedback>
          Since <pf>a = 1</pf>, we know that <pf>b = 2.5</pf>, which is a non-zero decimal.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>
            <pf>c</pf>
          </p>
        </statement>
        <feedback>
          <pf>c</pf> is a <pf>double</pf> and has a non-zero decimal.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>d</pf>
          </p>
        </statement>
        <feedback>
          C++ performs integer division to round <pf>1/5</pf> down to the nearest integer. The value
            will be stored as <pf>0</pf>, not <pf>0.2</pf>.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>e</pf>
          </p>
        </statement>
        <feedback>
          <pf>c</pf> squared may have a non-zero decimal, but automatic type conversion will round
            it down to the nearest integer before storing the value in <pf>e</pf>.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>
            <pf>f</pf>
          </p>
        </statement>
        <feedback>
          <pf>static_cast</pf> truncates <pf>c</pf> the value to 2. When stored into <pf>f</pf> it is 2.0.
        </feedback>
      </choice>
    </choices>
  </exercise>


  
  <exercise label="floatingpoint-math_type-cast-operators-ex-3">
    <statement>
      <p>Your final grade consists of your average performance on three exams.
        Your professor is using C++ to grade the exams and allows you to choose which
        method you'd like your exam to be graded.</p>
      <program>
double exam1 = 88.8;
double exam2 = 72.7;
double exam3 = 94.6;
</program>
      <p>
        <term>Method 1:</term>
      </p>
      <program>
int final = (static_cast&lt;int&gt;(exam1) + static_cast&lt;int&gt;(exam2) + static_cast&lt;int&gt;(exam3)) / 3;
</program>
      <p>
        <term>Method 2:</term>
      </p>
      <program>
int final = static_cast&lt;int&gt;((exam1 + exam2 + exam3) / 3);
</program>
      <p>Which method would <term>you</term> choose and why?</p>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p><term>Method 1:</term> both test
            scores will be rounded to the nearest <pf>int</pf>, which in my case, will round all of them
            up.</p>
        </statement>
        <feedback>
          Converting to an <pf>int</pf> does not round. It truncates (drops the decimal).
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>It does not matter, both produce the same result.</p>
        </statement>
        <feedback>
          Method 1 throws away the .8, .7, and .6 before averaging, while Method 2 averages first and then throws away the decimal part of the final result. The first method produces a grade of 82 while the second produces a grade of 83.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><term>Method 2:</term> the rounding happens at the very end, so my grade will be higher!</p>
        </statement>
        <feedback>
          Always save your rounding until the end!
        </feedback>
      </choice>
    </choices>
  </exercise>


</section>