<section xml:id="floatingpoint-math_floatingpoint-division"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Floating-Point Division</title>

  <p>Whole number value like 60 can be stored as either an <pf>int</pf> or a <pf>double</pf>. But even though they seem like the same number, C++ considers the integer value <pf>60</pf> different from the floating-point value <pf>60.0</pf>. They belong to different data types, and thus doing math with them can produce different results. This is most obvious when we do division.</p>

  <p>
    <idx>
      <h>division</h>
      <h>floating-point</h>
    </idx> If I divide 1.3 by 2.65, it is pretty clear that I expect a decimal (floating-point) answer. Thus C++ performs <term>floating-point division</term> and produces a decimal value. Using that knowledge, we can now calculate decimal value, like <q>what part of an hour is 45 minutes?</q>. We just have to make sure we use floating-point values in the calculation:</p>

  <listing>
  <program label="floatingpoint-math_floatingpoint-division-program-1"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/floatingpoint-division-1.cpp" parse="text"/>
</program>
  </listing>

  <p>Recall that if we divided one integer by another, like <pf>45 / 60</pf>, we would get 0 for our answer. C++ assumes that if you start with two integers, you want an integer answer. But if you ask to do division involving a floating-point value, like <pf>45.0 / 60.0</pf>, it will assume you want to do floating-point division and produce a decimal answer. It will make the same assumption even if there is just one floating point value involved, like <pf>45 / 60.0</pf>.</p>
  
  <p>Identifying whether an operation carries out integer division or floating point division
    can get tricky when we have a mix of integers and doubles in our expression.
    The thing to remember is if either the divisor or the dividend is a double
    then the program will carry out floating point division.</p>

  <listing label="floating_point_a1">
    <caption>
      Run the code to see what type of division occurs each time.
    </caption>
    <program label="floatingpoint-math_floatingpoint-division-program-2"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
using namespace std;

int main() {
    double value = 5.0/2; //(a)
    cout << "current value (a) is " << value << endl;

    value = 5/2.0; //(b)
    cout << "current value (b) is " << value << endl;

    value = 5/2; //(c)
    cout << "current value (c) is " << value << endl;

    value = 5.0/2.0; //(d)
    cout << "current value (d) is " << value << endl;
}
        ]]></code>
    </program>
  </listing>

  <insight xml:id="floatingpoint-math_floatingpoint-division-insight">
  <p>As long as either operand is a floating-point value, the operator will use floating-point math. If both operands are integers, the operator will use integer math.
  </p>
  <p>Doing integer math when you want to do floating-point math (with something like <pf>1 / 3</pf>) is a common logic error that can be hard to catch, since your program will compile without warning but produce the wrong kind of answer.</p>
  </insight>

  <p>This is true for other operations as well. If you add 4 to 2.5, the compiler assumes you want a decimal answer. However, this decision is made at each step of the calculation, without considering what might happen later. So the order of operations can matter. For example, consider the following code:
  </p>

  <listing>
  <program label="floatingpoint-math_floatingpoint-division-program-3"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/floatingpoint-division-2.cpp" parse="text"/>
</program>
  </listing>

  <p>You might expect <pf>value</pf> to be set to the result of 0.33333 times 3.14159. But the first step in evaluating the expression
  <pf>1 / 3 * 3.14159</pf> is dividing 1 by 3. Those are both integers, so C++ does whole number division and
  gets the result <pf>0</pf>. That makes the expresion into <pf>0 * 3.14159</pf> It does not matter that later the math involves a double, or that the result is
  stored into a double. At the point of the division, the math involves two integers, so the result is an integer.
  When the 0 is multiplied by 3.14159 it is promoted to a double <mdash/> 0.0 <mdash/> but that is too
  late to help produce the result we would expect.</p>

  <p>One way to solve this problem (once you figure out the logic error) is to make sure that if you want a decimal
  answer, that you do math with decimal values. This code works as expected: </p>

  <listing>
  <program label="floatingpoint-math_floatingpoint-division-program-4"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/floatingpoint-division-3.cpp" parse="text"/>
  </program>
  </listing>

  <exercise label="floatingpoint-math_floatingpoint-division-ex-0">
    <statement>
      <p>Drag each expression to the correct result. Assume the following are already defined:</p>
      <program>
        int a = 5;
        int b = 2;
        double x = 5.0;
        double y = 2.0;
      </program>
      <p>Hint: remember <xref ref="floatingpoint-math_floatingpoint-division-insight"/></p>
    </statement>
    <feedback>
      <p>Try again!</p>
    </feedback>
    <cardsort>
      <match>
        <premise><pf>a / b</pf></premise>
        <premise><pf>a / 2</pf></premise>
        <response>2</response>
      </match>
      <match>
        <premise><pf>a / 2.0</pf></premise>
        <premise><pf>x / 2.0</pf></premise>
        <premise><pf>x / 2</pf></premise>
        <premise><pf>x / y</pf></premise>
        <response>2.5</response>
      </match>
    </cardsort>
  </exercise>
  

  <exercise label="floatingpoint-math_floatingpoint-division-ex-2">
    <statement>
      <p>It's your birthday and you have 12 ounces of cake. You want to split it up evenly so that you and
        each of your 4 friends receive an equal amount. One of your friends wants to know the serving size of his slice. You write the following code in C++ to answer
        her question:</p>
        
        <program>
          int ouncesCake = 12;
          int people = 5;

          double servingSize = ouncesCake / people;</program>

        <p>The program claims <pf>servingSize</pf> is <fillin mode="string" case="insensitive" answer="2"/> servings.
          This is <fillin mode="string" case="insensitive" answer="less"/> (more, less, the same) than/as the correct answer.</p>
    </statement>
    <evaluation>
      <evaluate>
          <test>
            <strcmp use-answer="yes"/>
            <feedback>
              Correct! C++ performs integer division.
            </feedback>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              Hint: servingSize and people are integer variables!
            </feedback>
          </test>
      </evaluate>
      <evaluate>
          <test>
            <strcmp use-answer="yes"/>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              Is the answer the program computes more or less than you would get if you did decimal division?
            </feedback>
          </test>
      </evaluate>
    </evaluation>
  </exercise>
</section>