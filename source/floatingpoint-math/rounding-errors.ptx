<section xml:id="floatingpoint-math_rounding-errors"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Rounding Errors</title>

  <p>Most floating-point numbers are only <term>approximately</term> correct. Some numbers, like
    reasonably sized integers, can be represented exactly. But repeating fractions, like <m>1/3</m>,
    and irrational numbers, like <m>\pi</m>, cannot. To represent these numbers, computers have to
    round off to the nearest floating-point number. </p>

  <p>
    <idx>
      <h>rounding error</h>
    </idx>
    <idx>
      <h>error</h>
      <h>rounding</h>
    </idx> The difference between the number we want and the floating-point
    number we get is called <term>rounding error</term>. For example, the following two statements
    should produce equivalent results, but do not:</p>

  <listing xml:id="floatingpoint-math_rounding-errors-listing-1">
  <program label="floatingpoint-math_rounding-errors-program-1"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/rounding-errors-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>The problem is that <pf>0.1</pf> is a repeating fraction when converted into binary. So its
    floating-point representation stored in memory is only approximate. When we add up the
    approximations, the rounding errors accumulate.</p>
  
  <p>The values are very close. To see the difference, we had to add the code on line 7 to say <q>print to 20 places</q>.
  If you remove that line, the numbers will be only displayed to 6 digits. When rounded at that point, they both will look like 2.00000 and just display as 2.</p>
  
  <p>Why is this the case? Well, doubles have a fixed number of bits to store their answer.
  Imagine trying to store <m>\pi</m> as a decimal but only getting to use at most 6 digits. The
  closest you could come to the value of <m>\pi</m> would be <pf>3.14159</pf>. The same thing happens
  with doubles, only the values that are difficult to represent accurately are not always what we
  expect (0.1 is easy to represent in our base-10 number system, but difficult to represent in
  the base-2 system used by doubles).</p>

  <p>The answer is close to correct - doubles provide accuracy to ~15 significant digits.
    For many applications (like computer graphics, statistical analysis, and
    multimedia rendering), floating-point arithmetic has benefits that outweigh the costs.</p>

  <p>But if you need <term>absolute</term> precision, use integers instead. For example, if you were
  storing financial data for a bank, representing a penny as 0.01 dollars would be a bad idea.
  Over time, errors would accumulate and balances would no longer be correct. Instead, it would be
  better to represent the amount in cents - to represent $1.25 as 125. Any time you did a calculation
  that resulted in a partial cent you would figure out whether to round it up or down to the nearest cent. (Indeed there are established rules
  for how to round financial calculations).</p>
  
  <exercise label="floatingpoint-math_rounding-errors-ex-1">
    <statement>
      <p>Use <xref ref="floatingpoint-math_rounding-errors-listing-1"/> to test what value you get from <pf>5 + 0.1 + 0.1</pf>. Paste the answer in the box below.</p>
      <fillin mode="string"
                answer="5.19999999999999928946"/>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>