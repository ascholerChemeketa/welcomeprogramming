<section xml:id="floatingpoint-math_math-functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Math functions</title>

  <p>Up until now, we have only used the basic arithmetic operators.
  But what if you want to do calculate something more complex like <m>x^3</m> or <m>asin(x)</m>? You
  could figure out how to to do the math using basic operations and then write that code.
  Calculating <m>x^3</m> would not be hard - just multiply three copies of <m>x</m> together. But
  calculating a good approximation of something like <m>asin(x)</m> would be complex and laborious.
  It would be silly for every programmer to have to figure out how to perform complex math
  calculations from basic operations. And it would be painful to write that code each time a
  programmer wanted to do the math.</p>

  <p><idx>
      <h>function</h>
    </idx><idx>
      <h>call</h>
    </idx>Fortunately, C++ allows us to define <term>functions</term> that give a
  name to a series of statements. We can <term>call</term> a function using that name and it will
  perform the work defined by those statements.</p>

  <p>The idea of a function in programming is similar to the idea of a function in math. A mathematical function takes some input and produces an output based on that input. You may have seen this idea illustrated via a <q>function box</q> - a visualization of a function as a black box (one we can't see into) that transforms inputs:</p>

  <figure>
    <caption>A function box transforms inputs into outputs. This function could be <m>f(x) = 2x + 5</m> or <m>f(x) = x + 15</m> or anything else that would produce 25 given input of 10.</caption>
    <image source="images/function-box.svg" width="40%"
           >
      <shortdescription>10 is passed into the box f(x). 25 comes out.</shortdescription>
    </image>
  </figure>

  <p><idx>
      <h>abstration</h>
    </idx>The notion of a function as a black box is an important one. Functions provide an <term>abstraction</term> that hides the details of how a job is done. I don't have to know the details of how to calculate a square root, I just have to know that there is a function I can feed my number into and it will produce the value as its output. Someone had to figure out how to do that calculation and write code for it. But that code is hidden from me, the programmer who is using the function.</p>

  <p>Part of what <q>comes</q> with C++ is a set of
  function libraries that provide functions to accomplish basic tasks. The <pf>cmath</pf> library provides
  a number of functions that perform common mathematical operations. One function it provides is the <pf>sqrt</pf>
  function, which calculates the square root of a number. To use this function, we need to include the library that contains it (cmath) and then call the function with the number we want to take the square root of. Here is an example that calculates the square root
  of 17:</p>

  <program interactive="activecode" label="floatingpoint-math_math-functions-program-1">
<xi:include href="../../programs/floatingpoint-math/math-functions-1.cpp" parse="text"/>
</program>

  <p><idx>
      <h>pass</h>
    </idx>
  <idx>
      <h>parameter</h>
    </idx>
  <idx>
      <h>parameter</h>
      <h>passing</h>
    </idx>
  <idx>
      <h>return value</h>
    </idx> A few important things to notice about this sample: <ul>
      <li>We have to <pf>#include &lt;cmath&gt;</pf> to use <pf>sqrt</pf>. That is the C++ math library that contains the <pf>sqrt</pf>
  function.</li>
      <li>We pass the input to a function by putting values into parentheses after the function name. Here, <pf>x</pf> is the value we are <term>passing</term>
  to the <pf>sqrt</pf> function to tell it what value to take the square root of. This value that we <term>
  pass</term> is known as a <term>parameter</term> for the function.</li>
      <li>Many (but not all) functions
  produce an output, which is known as the <term>return</term> value. We have to do
  something with that value, like store it in a variable or print it or use it as part of a larger
  calculation. Here, we assign the result of the function to the variable <pf>root</pf>.</li>
      <li>A subtle point: note that <pf>x</pf> still has the value 17. In general
  functions do not change their parameter(s). Taking the square root of x with <pf>sqrt(x)</pf> does not
  change x, if just produces a new value.</li>
    </ul>
  </p>
  
  <note>
    <p>The <q>c</q> in <pf>cmath</pf> refers to the C programming language that C++ was based on (and is
  still closely related to). In C, there is a similar library called <pf>math.h</pf>. The <pf>cmath</pf> library is
  a version of <pf>math.h</pf> that has been <q>upgraded</q> to use C++ features. Although it is possible to
  use <pf>math.h</pf> in C++ code, you should always use <pf>cmath</pf> instead.</p>
  </note>

  <exercise label="floatingpoint-math_math-functions-ex-1">
    <statement>
      <p>Complete this line of code to passes the variable <pf>b</pf>'s value to <pf>sqrt</pf> and stores the result into <pf>a</pf>:</p>

      <p><pf>double</pf> <fillin mode="string" case="insensitive" answer="a"/><pf> = </pf><fillin mode="string" case="insensitive" answer="sqrt\\(b\\)"/><pf>;</pf></p>
    </statement>
    <evaluation>
      <evaluate>
          <test>
            <strcmp use-answer="yes"/>
            <feedback>
              Correct!
            </feedback>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              This should be the name of the variable we are storing the result into.
            </feedback>
          </test>
      </evaluate>
      <evaluate>
          <test correct="yes">
            <strcmp>sqrt\s*\(\s*b\s*\)</strcmp>
            <feedback>
              Correct!
            </feedback>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              Remember you need the name of the function, the parentheses, and the variable you are passing to the function.
            </feedback>
          </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>