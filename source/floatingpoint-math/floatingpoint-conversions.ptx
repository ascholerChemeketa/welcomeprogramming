<section xml:id="floatingpoint-math_floatingpoint-conversions"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Implicit Conversions</title>

  <p>As we have seen, the difference between the integer <pf>60</pf> from the floating-point value <pf>60.0</pf> can be confusing. They look like the same number. But they belong to different data types, and thus doing math with them can produce different results.</p>

  <p>Adding to the confusion is the fact that C++ will automatically <q>upgrade</q> an <pf>int</pf> to a <pf>double</pf> if you try to store a whole number value into a double variable. This is called <term>implicit conversion</term>. Even worse, if you print a value like 4.0, the unnecessary decimal portion is left off:
  <idx>
    <h>implicit conversion</h>
  </idx></p>

  <listing>
  <program label="floatingpoint-math_floatingpoint-conversions-program-1"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/floatingpoint-conversions-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>C++ can do the implicit conversions because any integer can be safely represent as a decimal value. The opposite is not true. There is no way to represent <pf>3.14159</pf> as a whole number without losing information. This code sample demonstrates what happens:</p>

  <listing>
  <program label="floatingpoint-math_floatingpoint-conversions-program-2"
           extra-compiler-args=" -Wconversion"
           interactive="activecode">
<xi:include href="../../programs/floatingpoint-math/floatingpoint-conversions-2.cpp" parse="text"/>
  </program>
  </listing>

  <p>Turning a decimal number into an integer can be done by dropping the decimal part. But doing so does change the value you are representing. So the compiler generates a warning. Here in the book, that warning is a fatal error that prevents the program from compiling.</p>

  <warning>
    <p>Depending on your environment, the compiler may or may not issue a warning for conversions from double to int. And, it may or may not treat that warning as an error and refuse to build the program.</p>
    <p>Even if your compiler just warns you and continues. You should consider the code to be a bug. Losing the decimal part of a number because you stored it into an <pf>int</pf> variable is likely going to be a <term>logic error</term>.</p>
  </warning>

  <exercise label="floatingpoint-math_floatingpoint-conversions-ex-1">
    <statement>
      <p>Consider the following C++
        code:</p>
      <program>double a = 7.01;
int b = 7;</program>
      <p>Which of the following are safe operations?</p>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p><pf>double c = b;</pf></p>
        </statement>
        <feedback>
          This sets c to 7.0. It is safe because no information is lost.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>int c = a;</pf></p>
        </statement>
        <feedback>
          This sets c to 7. It is not safe because information is lost.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>int c = a + b;</pf></p>
        </statement>
        <feedback>
          This sets c to 14. It is not safe because information is lost.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>double c = a + b;</pf></p>
        </statement>
        <feedback>
          This sets c to 14.01. It is safe because no information is lost.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>