<section xml:id="functions-testing_flow-execution"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Flow of Execution</title>
  <p>
    <idx>
      <h>flow of execution</h>
    </idx> When you look at a program that contains several functions,
    it is tempting to read it in order from top to bottom. But that is <term>not</term> the <term>flow
    of execution</term>, or the order the program actually runs.</p>

  <p>Programs always begin at the first statement of <pf>main</pf>, regardless of where it is in the
    source file. Statements are executed one at a time, in order, until you reach a function
    invocation, which you can think of as a detour. Instead of going to the next statement, you jump
    to the first line of the invoked function, execute all the statements there, and then come back
    and pick up exactly where you left off.</p>

  <p>Watching this process play out in Codelens is perhaps the best way to understand what is happening. Don't worry too much about what this code does (or what <pf>void</pf> means), pay attention to how the flow of execution works as we encounter function calls:</p>

<listing>
<program label="functions-testing_flow-execution-program-1" interactive="codelens">
<xi:include href="../../programs/functions-testing/execution-flow.cpp" parse="text"/>
</program>
</listing>

  <p>That flow is a little convoluted. In the middle
    of <pf>main</pf>, we jump off to <pf>printMessageTwice</pf>. While in that function, we twice jump off to execute <pf>printMessage</pf>. Then, once we are back in <pf>main</pf>, we call invokes <pf>printMessage</pf> directly, which causes yet another detour.</p>

  <p>Fortunately, C++ is good at keeping track of which functions are running. So when <pf>printMessage</pf> or <pf>printMessageTwice</pf>
    completes, it picks up where we left off in the calling function.</p>

  <exercise label="functions-testing_flow-execution-ex-1" language="natural">
    <statement>
      <p>What order will the letters be printed in the program below? Trace the execution by hand and arrange the blocks in the order the output would be printed.</p>
      <p>Start in <pf>main</pf>.  Every time you encounter a function call, remember where you are so you can return there when you are done with the function.</p>
      <program>
<xi:include href="../../programs/functions-testing/execution-flow-2.cpp" parse="text"/>
      </program>
    </statement>
    <blocks>
      <block>
        F
      </block>
      <block>
        D
      </block>
      <block>
        B
      </block>
      <block>
        E
      </block>
      <block>
        C
      </block>
      <block>
        A
      </block>
    </blocks>
  </exercise>

  <exercise label="functions-testing_flow-execution-ex-2">
    <statement>
      <p>Manually trace the code. How many calls to <pf>hi</pf> are made during the execution of the entire program?</p>
      <p>Start in <pf>main</pf>.  Every time you encounter a function call, remember where you are so you can
      return there when you are done with the function.</p>
      <program>
void hi() {
  cout &lt;&lt; "hiii !"&lt;&lt; endl;
}

void printGreeting(){
  hi();
  cout &lt;&lt; "how are you doing today. "&lt;&lt; endl;
  hi();
}

int main () {
  hi();
  printGreeting();
  hi();
}
</program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>1 call</p>
        </statement>
        <feedback>
          <p>hi( ) is called from multiple functions.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4 calls</p>
        </statement>
        <feedback>
          <p>Correct! main calls hi() twice, and calls printGreeting() once. printGreeting() calls hi() two times.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2 calls</p>
        </statement>
        <feedback>
          <p>hi( ) is called twice from main, but it is also called from printGreeting( ). And printGreeting( ) is called once from main.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3 calls</p>
        </statement>
        <feedback>
          <p>printGreeting() calls hi() two times.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>