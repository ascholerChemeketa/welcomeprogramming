<section xml:id="functions-testing_parameters"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Parameters</title>

    <p>Recall that the name for the extra information a function takes when it is called are the <term>
      parameters</term>. The values we pass in when the function is called are known as the <term>
      arguments</term>. We say that the arguments are <term>passed</term> to the function. <idx>
        <h>parameter</h>
      </idx>
    <idx>
        <h>argument</h>
      </idx>
    <idx>
        <h>parameter passing</h>
      </idx></p>

    <sidebyside widths="45% 45%">
      <listing>
        <caption><pf>myFunction</pf> has two parameters, <pf>x</pf> and <pf>y</pf>.</caption>
        <program>
int myFunction(int x, int y) {
  ...
}
</program>
      </listing>
      <listing>
        <caption>The arguments 2, 4 are being passed to <pf>myFunction</pf> in a call made from <pf>main</pf>.</caption>
        <program>
int main() {
    int result = myFunction(2, 4);
}
</program>
      </listing>
    </sidebyside>


    <exercise label="functions-testing_parameters-ex-1">
      <statement>
        <p>Match the function declaration to an example of its function call. (We haven't learned
          much about <pf>string</pf>s, but they are the type of data for pieces of text like <pf>"hello"</pf>.)</p>
      </statement>
      <feedback>
        <p>Try again!</p>
      </feedback>
      <cardsort>
        <match>
          <premise>int timesTwo(int x, int y);</premise>
          <response>timesTwo(4, 7);</response>
        </match>
        <match>
          <premise>int timesTwo(string y, int x);</premise>
          <response>timesTwo("hello", 10);</response>
        </match>
        <match>
          <premise>int timesTwo(double x, string y);</premise>
          <response>timesTwo(4.5, "hello");</response>
        </match>
        <match>
          <premise>int timesTwo(string x, string y);</premise>
          <response>timesTwo("hello", "hi");</response>
        </match>
      </cardsort>
    </exercise>

    <p> A function can have no parameters, one parameter, or many parameters. Each parameter must
      specify a type and multiple parameters must be separated by commas. <dl>
        <li>
          <title>Valid parameter lists:</title>
          <ul>
            <li>
              <pf>int foo() {</pf>
            </li>
            <li>
              <pf>int foo(int x) {</pf>
            </li>
            <li>
              <pf>int foo(double x) {</pf>
            </li>
            <li>
              <pf>int foo(int x, int y, int z) {</pf>
            </li>
          </ul>
        </li>
        <li>
          <title>Invalid parameter lists:</title>
          <ul>
            <li><pf>int foo {</pf> (missing the parameter list)</li>
            <li><pf>int foo(int x, y) {</pf> (no type for y)</li>
            <li><pf>int foo(int x double y) {</pf> (no comma between x and y)</li>
          </ul>
        </li>
      </dl>
    </p>


    <exercise label="functions-testing_parameters-ex-2">
      <statement>
        <p>Which of the following is a correct function header (first line of a function
          definition)?</p>
      </statement>
      <choices randomize="yes">
        <choice>
          <statement>
            <p>
              <pf>totalcost (double cost, tax, discount)</pf>
            </p>
          </statement>
          <feedback id="multiple_params_1_opt_a">
            <p><pf>totalcost</pf> needs a return type, and each parameter needs a data type.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>
              <pf>totalCost (double cost, double tax) {</pf>
            </p>
          </statement>
          <feedback id="multiple_params_1_opt_b">
            <p><pf>totalcost</pf> needs a return type.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              <pf>void totalCost (double cost, double tax, double discount) {</pf>
            </p>
          </statement>
          <feedback id="multiple_params_1_opt_c">
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </exercise>

</section>