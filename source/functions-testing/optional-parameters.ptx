<section xml:id="functions-testing_optional-parameters"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Default Parameters and Overloads</title>

  <note>
    <p><idx>
        <h>syntactic sugar</h>
      </idx>Programming languages often have syntax that makes it
      easier to write some pieces of code but do not really allow us to do anything fundamentally
      new. These bits of syntax are sometimes called <term>syntactic sugar</term> <mdash/> they makes
      the code <q>taste</q> better, but do not add any <q>nutritional value</q>.</p>
    <p>This section contains two bits of syntactical sugar that make it possible to write and call
      functions more flexibly. You could write any program you wanted without using these concepts,
      but they can be handy, and you are likely to see them in code written by others.</p>
  </note>

  <subsection>
    <title>Overloaded Functions</title>
    <p>When you define a function, you can provide multiple versions of the function with different
      numbers of parameters. This is called <term>overloading</term>. The compiler will choose the
      correct version of the function based on the number and types of the arguments you provide. <idx>
        <h>function</h>
        <h>overload</h>
      </idx>
    </p>
    <p>Here is an example of three different versions of a <pf>toInches</pf> function:</p>
    <program>
<xi:include href="../../programs/functions-testing/optional-parameters-1.cpp" parse="text"/>
</program>
    <p>You could call this function like <pf>toInches(5)</pf>, in which case the compiler would use the version
      that just takes feet. You could call it like <pf>toInches(2, 5)</pf> and the compiler would use the version
      that accepts two integers - yards and feet. Or you could call it with <pf>toInches(1, 2, 5)</pf> to use the
      version that takes three parameters.</p>

    <p>Why is this trick useful? It allows someone writing a code library to make it more flexible.
      We have seen how the <pf>cmath</pf> library uses it to provide multiple versions of functions like <pf>pow</pf>
      and <pf>sqrt</pf>. There are versions that take doubles, but there are also versions that take
      floats and other sized data types. If overloading didn't exist, the library would have to give
      each function a different name, like <pf>powDouble</pf>, <pf>powFloat</pf>, etc... That would be a mess!</p>

    <p>If you are going to use this trick, you do have to make sure all the functions have different
      lists of parameters. All that matters is the types and number of parameters, not the names of
      the parameters. So you can't write both <pf>void doThing(int inches)</pf> and <pf>void doThing(int cm)</pf>. Those both have the same
      parameter list - <pf>(int)</pf>. If you made the call <pf>doThing(10)</pf>, there would be no way to tell
      which version of the function you were trying to use.</p>


    <exercise label="functions-testing_optional-parameters-ex-1">
      <statement>
        <p>If we wrote the following function, which of the other functions below can we also
          legally write and add to the program?</p>
        <program line-numbers="yes">
        <code>
int func(double x, int y);
</code>
      </program>
      </statement>
      <choices randomize="yes">
        <choice>
          <statement>
            <p>
              <pf>int func(double a, int b);</pf>
            </p>
          </statement>
          <feedback> Since this function has the same name and parameter types as the given
            function, it is not allowed.</feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              <pf>int foo(double x, int y);</pf>
            </p>
          </statement>
          <feedback> This function has a different name from the given function, so it is allowed. </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              <pf>int func(double x);</pf>
            </p>
          </statement>
          <feedback> Although this function has the same name as the given function, it has a
            different number of parameters, so it is allowed. </feedback>
        </choice>
        <choice>
          <statement>
            <p>
              <pf>void func(double x, int y);</pf>
            </p>
          </statement>
          <feedback> Although this function has a different return type, its parameter list is the
            same as the given function, so it is not allowed. </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>
              <pf>int func(int y, double x);</pf>
            </p>
          </statement>
          <feedback> Although this function has the same name as the given function, its parameter
            list is in a different order, so it is allowed. </feedback>
        </choice>
      </choices>
    </exercise>

  </subsection>

  <subsection>
    <title>Default Parameter Values</title>
    <p>
      <idx>
        <h>parameter</h>
        <h>default value</h>
      </idx>It is possible to specify <term>default values</term> for
      parameters in a function. These default values get used if the caller does not provide the
      appropriate parameter. Like overloading, this trick can make functions more flexible - one
      function can respond to multiple different kinds of call. Here is an example of the syntax:</p>

    <program highlight-lines="1"
             line-numbers="yes">
<xi:include href="../../programs/functions-testing/default-parameters-1.cpp" parse="text"/>
</program>

    <p>Notice the <pf> = 0</pf> after <pf>yards</pf> and <pf>miles</pf>. Those are the default values - they will
      be used if the caller leaves out the miles and or yards. To call the function, you can specify
      either one <pf>int</pf> (feet), two <pf>int</pf>s (feet and yards), or three <pf>int</pf>s (feet,
      yards, miles) as shown in this program. Note that </p>

    <listing>
      <program label="functions-testing_optional-parameters-program-1"
               interactive="codelens">
<xi:include href="../../programs/functions-testing/default-parameters-2.cpp" parse="text"/>
</program>
    </listing>

    <p>Although when calling the function we can skip providing values for either <pf>miles</pf> or <pf>yards</pf>
      and <pf>miles</pf>, we cannot skip over <pf>yards</pf> and provide a value for <pf>miles</pf>. If skipping
      were allowed, something like <pf>toFeet(5, 2)</pf> would be ambiguous - the compiler would not know if the
      2 was for <pf>yards</pf> or <pf>miles</pf>. </p>

    <p>To prevent this kind of confusion, default parameters have to follow these rules: <ul>
        <li>In the function definition, parameters with default values must come after ones that do
      not have defaults. We could NOT write the function above as <pf>int toInches(int miles = 0, int yards = 0, int feet)</pf>.</li>
        <li>When calling the function, you can stop providing values at any point you like and rely
      on default values for the remaining parameters. But you can not skip some parameters and then
      start providing values for later ones. If I want to call the function above with 5 <pf>feet</pf>
      and 1 <pf>miles</pf>, you would have to use <pf>toInches(5, 0, 1)</pf>. Since we are specifying a <pf>miles</pf> value,
      we also must specify the yards.</li>
      </ul>
    </p>

    <p>There is some overlap in the kinds of things made easier by default values and overloaded
      functions. Default values tend to make it easier to provide multiple ways to call the same
      basic function, while overloading allows for more flexibility in how different kinds of
      parameters are handled. </p>

    <p>In the case of <pf>toInches</pf>, default value trick allows the writer of the function to provide
      multiple ways to call the function without having to write multiple overloaded versions. Which
      is nice. But, default values are less flexible. You can write overloaded functions that take
      completely different lists of parameters like <pf>writeToLog(int num)</pf> and <pf>writeToLog(double num, int numDigit)</pf>, but you could not
      reasonably combine those completely different functions into one version using default
      parameters.</p>

    <exercise label="functions-testing_default-parameters-ex-1"
              language="cpp">
      <statement>
        <p>Arrange the code to make the header for a function <pf>printTime</pf> that takes two parameters:
          hours, minutes. Hours should be required and minutes should be optional with a default
          value of 0. You will not use all the blocks</p>
      </statement>
      <blocks layout="horizontal"
              randomize="yes">
        <block><c>void printTime</c></block>
        <block><c>(</c></block>
        <block><c>int hours</c></block>
        <block correct="no"><c>int hours = 0;</c></block>
        <block><c>,</c></block>
        <block correct="no"><c>int minutes</c></block>
        <block correct="yes"><c>int minutes = 0</c></block>
        <block correct="no"><c>minutes = 0</c></block>
        <block><c>)</c></block>
      </blocks>
    </exercise>

  </subsection>
</section>