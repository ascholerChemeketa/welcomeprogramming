<section xml:id="loops_increment-decrement"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Increment and Decrement</title>

  <p>Here is another <pf>while</pf> loop example; this one displays the numbers 1 to 5: </p>

  <program>
<xi:include href="../../programs/loops/increment-decrement-1.cpp" parse="text"/>
</program>

  <p>
    <idx>
      <h>increment</h>
    </idx>
    <idx>
      <h>decrement</h>
    </idx> Assignments like <pf>i = i + 1</pf> don't often appear in loops, because C++
    provides a more concise way to add and subtract by one. Recall that, <pf>++</pf> is the <term>
    increment</term> operator; it has the same effect as <pf>i = i + 1</pf>. And <pf>--</pf> is the <term>
    decrement</term> operator; it has the same effect as <pf>i = i - 1</pf>. </p>

  <p>We introduced these <q>shortcut operators</q> back in <xref ref="variables-operators_shortcut-operators"/>. There, we said there is no reason you have to use them, but you should learn to recognize them as they are commonly used. Loops are the most important example of this. Programmers will almost always write <pf>i++</pf> or <pf>++i</pf></p>

  <note><p>In C++, there are some differences between <pf>i++</pf> and <pf>++i</pf> that can make the choice of which to use important:
    <ul>
      <li>If you are using them as part of a larger expression, the placement of the <pf>++</pf> changes when the increment happens.</li>
      <li>If you are using <pf>++</pf> on more complex structures, the preincrment version - <pf>++i</pf> - can be more efficient than the post increment version.</li>
    </ul>
    When used on their own with integer variables it does not matter which version you use. But it is not a bad habit to get used to writing <pf>++i</pf> by default. Many complex structures only provide the preincrement version.</p></note>

  <p>If you want to increment or decrement a variable by an amount other than <pf>1</pf>, you can use <pf>+=</pf>
    and <pf>-=</pf>. For example, <pf>i += 2</pf> increments <pf>i</pf> by <pf>2</pf>: </p>

  <program>
<xi:include href="../../programs/loops/increment-decrement-2.cpp" parse="text"/>
</program>

  <p> And the output is as follows: </p>

  <console>
    <output>
2, 4, 6, 8, Who do we appreciate?
</output>
  </console>

  
  <exercise label="loops_increment-decrement-ex-1">
    <statement>
      <p>The super evil villian RePete wants to annoy the city by
        hacking into the city's helper robots and making them repeat
        everything they say 5 times. However, there's an error in his
        code and now the robots won't stop repeating! Can you find the
        error?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
void repeatBot() {
  int n = 0;
  while (n < 5) {
    cout << "Hello, how may I help you? ";
    --n;
  }
}

int main() {
  repeatBot();
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p><pf>repeatBot</pf> can only take one word as an argument.</p>
        </statement>
        <feedback>
          A <pf>string</pf> is any number of characters or words surrounded by double quotes, not just
            one word.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p><pf>n</pf> is declared to be 0 and 0 is always less than 5.</p>
        </statement>
        <feedback>
          The code doesn't loop infinitely because of the value <pf>n</pf> was declared to be.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Every time the <pf>while</pf> loop runs, <pf>n</pf> is reset to 0, so it will always be less than
            5.</p>
        </statement>
        <feedback>
          The initialization of <pf>n</pf> occurs outside the <pf>while</pf> loop, so the value of <pf>n</pf>
            does not get reset to 0.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p><pf>n</pf> is declared to be 0 and we continuously decrement <pf>n</pf> so it will always be
            less than 5.</p>
        </statement>
        <feedback>
          Since <pf>n</pf> starts at 0 and gets smaller, the conditional for the <pf>while</pf> loop will
            always be true, and thus the code runs forever.
        </feedback>
      </choice>
    </choices>
  </exercise>


  <exercise label="loops_increment-decrement-ex-2">
    <statement>
      <p>After making some changes to his code, RePete tries again.
        This time, however, the robots don't repeat anything!
        Can you find the new error?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
void repeatBot() {
  int n = 0;
  while (n > 5) {
    cout << "Hello, how may I help you? ";
    ++n;
  }
}

int main() {
  repeatBot();
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p><pf>n &gt; 5</pf> is not a valid conditional, so the <pf>while</pf> loop doesn't execute.</p>
        </statement>
        <feedback>
          <pf>n &gt; 5</pf> is a boolean statement and thus is a valid conditional.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of <pf>n</pf> never gets modified in the <pf>while</pf> loop.</p>
        </statement>
        <feedback>
          <pf>n</pf> is incremented in the <pf>while</pf> loop after the <pf>cout</pf> statement.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>In the <pf>cout</pf> statement, only spaces are printed.</p>
        </statement>
        <feedback>
          <pf>input</pf> is also printed.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The conditional for the <pf>while</pf> loop is not met.</p>
        </statement>
        <feedback>
          Since <pf>n</pf> is declared to be 0, 0 is not greater than 5, so the <pf>while</pf> loop does
            not execute.
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>