<section xml:id="loops_counting"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Counting Loops</title>

  <subsection>
    <title>Counting by Ones</title>
    <p>Every loop has the same conceptual structure:</p>

    <pre>
INITIALIZE LOOP VARIABLE
WHILE CONDITION IS TRUE
    DO SOMETHING AND UPDATE LOOP VARIABLE
  </pre>

    <p>But there are some different ways to apply that basic pattern that are worth learning. The
      first in the <term>counting loop</term>. A counting loop does what the title advertises: it
      counts. We have already seen a number of counting loops, like this one that counts from 1 to
      5: <idx>
        <h>loop</h>
        <h>counting</h>
      </idx></p>

    <listing>
      <program label="loops_counting-program-1"
               interactive="activecode">
<xi:include href="../../programs/loops/counting-1.cpp" parse="text"/>
</program>
    </listing>

    <p>
      <idx>
        <h>increment</h>
      </idx>
    <idx>
        <h>decrement</h>
      </idx> Although we could count by ones using <pf>i = i + 1</pf>, most
      programmers use the <pf>++</pf> or <term> increment</term> operator to increase a value by
      one. And they use <pf>--</pf> to <term>decrement</term> a value (decrease it by one). When we
      introduced these operators back in <xref ref="variables-operators_shortcut-operators"/>, we
      discussed the difference between <pf>i++</pf> and <pf>++i</pf> But it is worth quickly
      reviewing and expanding on what we learned there.</p>

    <p>When used on their own with integer variables, they do the same thing - they increase the
      variable by one. However, if you mix them with other logic, the order of <pf>++</pf> and the
      variable determines when the variable in increased:</p>

    <program>
      int j = i++;  // set j to have i's current value, then increment i
      int j = ++i;  // increment i, then set j to have i's new value
    </program>

    <p>Normally you do not need to remember that - when we use <pf>++</pf> or <pf>--</pf> in a loop,
      it is generally on their own:</p>

    <program>
      i++;  // increase i by 1. It would happen after any other code in the statement
      ++i;  // increase i by 1. It would happen before any other code in the statement
    </program>

    <p>As we will learn later, for more complex data, the preincrement version can be more
      efficient. So it is generally a good habit to use <pf>++i</pf> in C++.</p>

    <p>Although we generally count by ones, we can also write a loop that counts by 2's or 5's or
      any other number:</p>

    <listing>
      <program label="loops_counting-program-1by5s"
               interactive="activecode">
<xi:include href="../../programs/loops/counting-1by5s.cpp" parse="text"/>
</program>
    </listing>

  </subsection>

  <subsection>
    <title>Where to Start Counting</title>

    <p>The loop at the top of the page repeats 5 times by counting from 1 to 5. Most programmers would write a loop
      that repeats 5 times as starting from 0 and counting up to but not including 5, like this:</p>

    <listing>
      <program label="loops_counting-program-2"
               interactive="activecode">
<xi:include href="../../programs/loops/counting-2.cpp" parse="text"/>
</program>
    </listing>

    <p>The program repeats the body 5 times, but the output is now 0, 1, 2, 3, 4. If we care about
      the numbers being printed, that would be a problem. But often, we aren't doing much with the
      loop control variable other than tracking the progress of the loop. Say I want to print out <pf>
      "Hello"</pf> 5 times. It doesn't matter what my counter is doing, as long as it causes the
      loop to repeat 5 times:</p>

    <listing>
      <program label="loops_counting-program-3"
               interactive="activecode">
<xi:include href="../../programs/loops/counting-3.cpp" parse="text"/>
</program>
    </listing>

    <p>That program will behave exactly the same if we count from 0-4 or if we count from 1-5. We
      just need to make sure that we count the right number of things. If we start from 0 and count
      up to and including 5, we would repeat 6 times. If we start counting from 1 and count up to
      but not including 5, we would only repeat 4 times.</p>

    <warning>
      <p><term>Off by one</term> errors are one of the most common types of errors in programs. An
        off by one error occurs when a loop goes one step too far or stops one step too early. Think
        carefully about whether to use <pf>&lt;</pf> or <pf>&lt;=</pf> in a particular loop so that
        it repeats the right number of times.</p>
    </warning>
  </subsection>

  <subsection>
    <title>Naming the Counter</title>

    <p>Because the loop control variable has no meaning other than <q>the variable that is
      controlling the loop</q>, programmers have developed the convention of naming an otherwise
      meaningless loop counter <pf>i</pf>. If we need a second loop counter somewhere that <pf>i</pf>
      is already in use, we use <pf>j</pf>, then <pf>k</pf>, etc...</p>

    <p>You should get used to seeing <pf>i</pf> used in this way, but don't assume that it always
      means it is now OK to name variables using single letters. Variables should always have
      meaningful names. However, for programmers who are used to thinking of <pf>i</pf> as
      always being <q>loop counter</q>, it is a meaningful name. It means <q>loop counter</q>.</p>

    <p>Also, if the loop counter has a meaning beyond <q>loop counter</q>, you should consider
      giving it a real name, not just <pf>i</pf>. Say you are counting off the months of the year
      (1-12). Code inside the loop that works with the variable, like the print statement, makes
      more sense if it is clear that the thing we are counting is actually the months:</p>

      <sidebyside>
    <listing>
      <caption>Clear that we are counting months</caption>
      <program><![CDATA[
int month = 1;
while (month <= 12) {
    //lots of other code
    //...
    //lots of other code
    cout << month << endl;
    month++;
}]]>
  </program>
    </listing>
    <listing>
      <caption>Using i makes it less clear</caption>
      <program><![CDATA[
int i = 1;
while (i <= 12) {
    //lots of other code
    //...
    //lots of other code
    cout << i << endl;
    i++;
}]]>
  </program>
    </listing>
      </sidebyside>
      
  </subsection>


  <exercise label="loops_counting-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>The program below should print out the even numbers between 20 and 40, inclusive (including 20 and 40), but the
        code is mixed up and contains extra blocks. Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block>
        <choice correct="yes">
          <cline>int main() {</cline>
        </choice>
        <choice>
          <cline>main(int) {                         </cline>
        </choice>
      </block>
      <block>
        <cline>   int n = 20;</cline>
      </block>
      <block correct="no">
        <cline>   int n = 0; </cline>
      </block>
      <block>
        <choice correct="yes">
          <cline><![CDATA[   while (n <= 40) {]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (n < 40) {                        ]]></cline>
        </choice>
      </block>
      <block>
        <cline><![CDATA[      cout << n << endl;]]></cline>
      </block>
      <block>
        <cline>      n = n + 2;</cline>
      </block>
      <block correct="no">
        <cline>      n++;                 </cline>
      </block>
      <block correct="no">
        <cline>      n = n * 2;                 </cline>
      </block>
      <block>
        <cline>   }</cline>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="loops_counting-ex-2"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>The program below should count down from 100 to 0 by 10 but the code is mixed
        up and contains extra blocks. Put the necessary blocks in the correct order.</p>
    </statement>
    <blocks>
      <block>
        <cline>int main() {</cline>
      </block>
      <block>
        <cline>   int n = 100;</cline>
      </block>
      <block correct="no">
        <cline>   int n = 10; </cline>
      </block>
      <block>
        <cline>   while (n &gt;= 0) {</cline>
      </block>
      <block correct="no">
        <cline>   while (n &lt; 0) { </cline>
      </block>
      <block correct="no">
        <cline>   while (n &gt; 0) { </cline>
      </block>
      <block>
        <cline><![CDATA[      cout << n << endl;]]></cline>
      </block>
      <block>
        <cline>      n -= 10;</cline>
      </block>
      <block correct="no">
        <cline>      n += 10;                 </cline>
      </block>
      <block>
        <cline>   }</cline>
      </block>
      <block>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

</section>