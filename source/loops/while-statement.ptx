<section xml:id="loops_while-statement"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>The while Statement</title>

  <p>
    <idx>
      <h>iteration</h>
    </idx>
    <idx>
      <h>looping</h>
    </idx>
    <idx>
      <h>loop</h>
    </idx> 
    <term>Looping</term> or <term>iteration</term> is when a program repeatedly runs the same lines of code. A loop is created when the programmer specifies that the program need to jump back to a previous instruction instead of continuing to the next instruction.</p>

  <p>
    <idx>
      <h>while</h>
    </idx>
    <idx>
      <h>loop</h>
      <h>while</h>
    </idx>
    <idx>
      <h>statement</h>
      <h>while</h>
    </idx> The most fundamental loop structure in C++ is a <pf>while</pf> statement. It says <q>While the condition is true, do the body. Once the condition is false, continue with the code after the body.</q> Here is a simple example to watch in Codelens:</p>

  <listing>
  <program label="loops_while-statement-program-1" interactive="codelens">
<xi:include href="../../programs/loops/while-statement-1.cpp" parse="text"/>
</program>
  </listing>

  <p> Reading the code in English sounds like this: <q>Set <pf>n</pf> to 3. While <pf>n</pf> is
    greater than 0, print the value of <pf>n</pf>, and reduce the value of <pf>n</pf> by 1. After n is 0, print Blastoff!</q>
  </p>

  <p> The flow of execution for a <pf>while</pf> statement is as follows: <ol>
      <li>
        <p>Evaluate the <term>test</term> (condition) in parentheses, which produces <pf>true</pf> or <pf>false</pf>.</p>
      </li>
      <li>
        <p>If the condition is <pf>false</pf>, skip the <term>body</term> (statements in braces).</p>
      </li>
      <li>
        <p>If the condition is <pf>true</pf>, execute the <term>body</term> and go back to step 1.</p>
      </li>
    </ol>
  </p>
  
  <figure>
    <caption>Flow of execution for a <pf>while</pf> loop.</caption>
    <image width="60%"
           source="images/control-while.svg"
           >
      <shortdescription>Flowchart showing the structure of a while loop.</shortdescription>
    </image>
  </figure>


  <p>
    <idx>
      <h>loop body</h>
    </idx>
    <idx>
      <h>loop variable</h>
    </idx>
    <idx>
      <h>infinite loop</h>
    </idx>
    <idx>
      <h>loop</h>
      <h>infinite</h>
    </idx> 
    <idx>
      <h>loop</h>
      <h>test</h>
    </idx> 
    <idx>
      <h>loop</h>
      <h>variable</h>
    </idx> The <term>test</term> of the loop almost always has a variable as part of the expression it tests. Without a variable, there is no way for the loop to terminate once it starts. This variable is referred to as a <term>loop control variable</term>. The
    <term>body</term> of the loop must change the value of that variable so that, eventually, the condition becomes <pf>false</pf> and the loop terminates. Otherwise, the loop will repeat forever, which is called an <term>infinite loop</term>.</p>

  <p>This example has an infinite loop. It will print the number <pf>3</pf> forever, or at least until you get bored of pressing <term>Next</term>.</p>

  <listing>
  <program label="loops_while-statement-program-2" interactive="codelens">
<xi:include href="../../programs/loops/while-statement-2.cpp" parse="text"/>
</program>
  </listing>

  <warning>
  <p>When you make an infinite loop on an ActiveCode problem, it will display <pf>Compiling and running your program</pf> for ~10 seconds until the server decides to stop your program. If you run an infinite loop on your own computer, you will need to stop the program manually. You can generally do this by pressing <pf>Ctrl+C</pf> in the terminal window where the program is running. That sends a <q>kill</q> signal to the program, which should stop it.
  </p>
  </warning>

  <p>It is also possible for the body of a loop to never end up executing. Notice in this sample that the condition is <pf>false</pf> the first time we reach it. That means the body will never get a chance to execute:</p>

  <listing>
  <program label="loops_while-statement-program-4"  interactive="activecode">
<code>
<xi:include href="../../programs/loops/while-statement-4.cpp" parse="text"/>
</code>
</program>
  </listing>

  <exercise label="loops_while-statement-ex-1">
    <statement>
      <p>The following code contains an infinite loop. Which is the best explanation for why the
        loop does not terminate?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int n = 10;
int answer = 1;
while (n > 0) {
    answer = answer + n;
    n = n + 1;
}
cout << answer;
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice correct="yes">
        <statement>
          <p>n starts at 10 and is incremented by 1 each time through the loop, so it will always be
            positive.</p>
        </statement>
        <feedback>
          The loop will run as long as n is positive. In this case, we can see that n will never
            become non-positive as the while statement condition will never be met.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The answer starts at 1 and is incremented by n each time, so it will always be
            positive.</p>
        </statement>
        <feedback>
          While it is true that answer will always be positive, answer is not considered in the
            loop condition.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>You cannot compare n to 0 in while loop. You must compare it to another variable.</p>
        </statement>
        <feedback>
          It is perfectly valid to compare n to 0. Though indirectly, this is what causes the
            infinite loop.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>In the while loop body, we must set n to False, and this code does not do that.</p>
        </statement>
        <feedback>
          The loop condition must become False for the loop to terminate, but n by itself is not
            the condition in this case.
        </feedback>
      </choice>
    </choices>
  </exercise>


  <exercise label="loops_while-statement-ex-2">
    <statement>
      <p>What is printed by this code? Make a memory diagram and trace the loop by hand.</p>
      <program line-numbers="yes">
        <code><![CDATA[
int n = 1;
int x = 2;
while (n < 5) {
    n = n + 1;
    x = x + 1;
    n = n + 2;
    x = x + n;
}
cout << n;
cout << x;
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>4 7</p>
        </statement>
        <feedback>
          Setting a variable so the loop condition would be false in the middle of the loop body
            does not keep the variable from actually being set.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5 7</p>
        </statement>
        <feedback>
          Setting a variable so the loop condition would be false in the middle of the loop body
            does not stop execution of statements in the rest of the loop body.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>7 15</p>
        </statement>
        <feedback>
          After n becomes 5 and the test would be False, but the test does not actually come
            until after the end of the loop - only then stopping execution of the repetition of the
            loop.
        </feedback>
      </choice>
    </choices>
  </exercise>
  
  <exercise label="loops_while-statement-ex-3">
    <statement>
      <p>A friend tries writing this code to print out a greeting 5 times. Why does it not work correctly?</p>
      <program language="cpp"
               line-numbers="yes">
        <code><![CDATA[
int main() {
  int n = 0;
  while (n > 5) {
    cout << "Hello, how may I help you? ";
    ++n;
  }
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p><pf>n &gt; 5</pf> is not a valid conditional, so the <pf>while</pf> loop doesn't execute.</p>
        </statement>
        <feedback>
          <pf>n &gt; 5</pf> is a boolean statement and thus is a valid conditional.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of <pf>n</pf> never gets modified in the <pf>while</pf> loop.</p>
        </statement>
        <feedback>
          <pf>n</pf> is incremented in the <pf>while</pf> loop after the <pf>cout</pf> statement.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The conditional for the <pf>while</pf> loop is not met.</p>
        </statement>
        <feedback>
          <pf>n</pf> is declared to be 0, and 0 is not greater than 5, so the <pf>while</pf> loop does
            not execute.
        </feedback>
      </choice>
    </choices>
  </exercise>


</section>