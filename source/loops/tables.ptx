<section xml:id="loops_tables"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Tables</title>
  <p>One of the things loops are good for is generating tabular data. For example, before computers
    were readily available, people had to calculate logarithms, sines and cosines, and other common
    mathematical functions by hand. To make that easier, there were books containing long tables
    where you could find the values of various functions. Creating these tables was slow and boring,
    and the result tended to be full of errors.</p>
  <p>When computers appeared on the scene, one of the initial reactions was, <q>This is great! We
    can use the computers to generate the tables, so there will be no errors.</q> That turned out to
    be true (mostly), but shortsighted. Soon thereafter computers and calculators were so pervasive
    that the tables became obsolete.</p>
  <p>Well, almost. It turns out that for some operations, computers use tables of values to get an
    approximate answer, and then perform computations to improve the approximation. In some cases,
    there have been errors in the underlying tables, most famously in the table the original Intel
    Pentium used to perform floating-point division.</p>
  <p>Although a <q>log table</q> is not as useful as it once was, it still makes a good example of
    iteration.</p>
  <listing label="tables_AC_1">
    <caption> This active code outputs a sequence of values in the left column and their base 2
      logarithms in the right column. </caption>
    <program label="loops_tables-program-1"
             interactive="activecode"
             line-numbers="yes">
      <code><![CDATA[
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int x = 1;
    while (x <= 16) {
        cout << x << "\t" << log2(x) << endl;
        x = x + 1;
    }
}
        ]]></code>
    </program>
  </listing>
  <p>The sequence <pf>\t</pf> represents a <term>tab</term> character. A tab character causes the cursor
    to shift to the right until it reaches one of the <term>tab stops</term>, which are normally
    every eight characters. This helps the second column stay lined up even when the length of the
    number in the first column goes from 1 to 2 digits. If we used the string <pf>" "</pf> to space out the
    columns, the second column would jump over when the first column changed length. We will learn about
  more sophisticated ways to space out data as it is printed later, but for now, tabs do a good enough job.</p>

  <p>When making a table, or doing any work with a loop, it is important to think about what
    variable really is the loop control variable. Say you are asked to print a table of investment
    income like the one below. The investment starts at $10,000 and grows by 20% until it reaches at
    least $100,000:</p>

  <console>
    <output>Year	Investment Amount
------------------------
1	$10000
2	$12000
3	$14400
4	$17280
5	$20736
6	$24883.2
7	$29859.8
8	$35831.8
9	$42998.2
10	$51597.8
11	$61917.4
12	$74300.8
13	$89161
14	$106993
</output>
  </console>

  <p>Stop and think about what is really controlling that loop? Does the problem specify how many
    months the process takes? No - it says that we want to stop when we hit $100,000+ not after X
    months. (Though you could do math to figure out the number of months.) So despite counting from
    1 to 14, this isn't really a counting loop. It is a sentinel value loop that is looking for the
    balance to become $100,000+. Here is what the program might look like:</p>

  <listing>
  <program label="loops_tables-program-2"
           interactive="activecode"
           line-numbers="yes">
<xi:include href="../../programs/loops/tables-1.cpp" parse="text"/>
  </program>
  </listing>

  <p>Key things to note: <ul>
      <li><pf>balance</pf> is the loop control variable. It is serving as an accumulator to store the
    interest earned each year.</li>
      <li><pf>years</pf> is a counter variable we increase by one each time through the loop, but the loop
    logic does not depend on its value.</li>
      <li>There are multiple updates that need to happen each year. We need to increment <pf>years</pf>,
    calculate the interest based on the current balance, and then update the balance.</li>
      <li>The loop does not print the last row of the table. After the updates are done, if we have
    hit the <pf>TARGET</pf>, the loop stops without printing the final value. So we do one last print
    statement after the loop to handle that row.</li>
      <li>Instead of magic numbers for <pf>START_VALUE</pf>, <pf>GROWTH_RATE</pf>,and <pf>TARGET</pf>, we have constants.
    When values in a program should be reconfigurable, but do not come from input, it is a good idea
    to make them constants and declare them together in one place.</li>
    </ul>
  </p>

  <insight>
    <p>It is often necessary (or at least easier) to handle the first or last item in a sequence
      before or after the loop that handles the other items.</p>
    <p>Doing this is better than putting an <pf>if</pf> inside the loop to do something special only in the
      first or last iteration. We could move the final output inside the loop above by doing:</p>
    <listing>
    <program><![CDATA[
        ...
        balance += interest;
        if (balance >= TARGET) {
            cout << years << "\t$" << balance << endl;
        }
    }
    ]]>
    </program>
    </listing>
    <p>That solution needless complicates every iteration of the loop to guard against the special
      case that we are actually now finished.</p>
  </insight>

  <exercise label="loops_tables-ex-1"
            numbered="yes"
            adaptive="yes"
            indentation="hide">
    <statement>
      <p>Let's write the code that prints out the powers of two up to 16.</p>
    </statement>
    <blocks>
      <block>
        <cline>int main() {</cline>
      </block>
      <block>
        <cline>   int x = 1;</cline>
      </block>
      <block>
        <choice correct="yes">
          <cline>   while (x &lt; 17) {</cline>
        </choice>
        <choice>
          <cline><![CDATA[   while (x < 16) {                        ]]></cline>
        </choice>
      </block>
      <block>
        <choice correct="yes">
          <cline><![CDATA[      cout << x << "\t" << pow(2, x) << endl;]]></cline>
        </choice>
        <choice>
          <cline><![CDATA[      cout << x << "\t" << pow(x, 2) << endl;                        ]]></cline>
        </choice>
      </block>
      <block>
        <cline>      x++;</cline>
        <cline>   }</cline>
        <cline>}</cline>
      </block>
    </blocks>
  </exercise>

  <exercise label="loops_tables-ex-2">
    <statement>
      <p>How would you write a tab character? <fillin mode="string"
                case="insensitive"
                answer=".*\\t.*"/>
      </p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp use-answer="yes"
                  strip="no"/>
        </test>
      </evaluate>
    </evaluation>
  </exercise>
  <exercise label="loops_tables-ex-3">
    <statement>
      <p>How can we modify the code below to print out a table of the first five odd numbers and
        their perfect cubes?</p>
      <program line-numbers="yes">
        <code><![CDATA[
int main() {
  int x = 1;
  while (x < 11) {
    cout << x << "\t" << pow(x, 2) << endl;
    x = x + 1;
  }
}
]]></code>
      </program>
    </statement>
    <choices randomize="yes">
      <choice>
        <statement>
          <p>Change <pf>pow(x,2)</pf> to <pf>pow(3,x)</pf> and change <pf>x = x + 1</pf> to <pf>x = x + 2</pf>.</p>
        </statement>
        <feedback> Check the order of the <pf>pow</pf> function! </feedback>
      </choice>
      <choice>
        <statement>
          <p>Change <pf>pow(x,2)</pf> to <pf>pow(x,3)</pf>.</p>
        </statement>
        <feedback> This will print out the first ten perfect cubes. </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Change <pf>pow(x,2)</pf> to <pf>pow(x,3)</pf> and change <pf>x = x + 1</pf> to <pf>x = x + 2</pf>.</p>
        </statement>
        <feedback> Changing both the <pf>pow</pf> function and the increment in this way gives us the
          right answer. </feedback>
      </choice>
      <choice>
        <statement>
          <p>Change <pf>x &lt; 11</pf> to <pf>x &lt; 6</pf> and change <pf>pow(x,2)</pf> to <pf>pow(x,3)</pf>.</p>
        </statement>
        <feedback> This will print out the first five perfect cubes, but not the first five odd
          perfect cubes.</feedback>
      </choice>
    </choices>
  </exercise>
</section>