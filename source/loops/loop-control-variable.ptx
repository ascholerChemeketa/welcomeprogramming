<section xml:id="loops_loop-control-variable"
         xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Loop Control Variables</title>

  <p>The condition for a loop almost always has a variable:</p>

  <program>
    while (count &lt; 10)
  </program>

  <program>
    while (money > 0)
  </program>

  <p>Try running the two programs. Which one produces output that is most intuitive?</p>

  <p>That variable is called the <term>loop control variable</term> because it controls how many times the loop runs. In order for the loop to eventually stop, the loop control variable must be changed inside the body of the loop so that the condition will eventually become false. <idx><h>loop control variable</h></idx></p>

  <p>Here are two loops that both attempt to count by 1. In both, the loop control variable is <pf>i</pf> - it is the variable that is being tested to determine if the loop should continue.</p>

  <listing>
  <program label="loops_loop-control-variable-1" interactive="activecode">
<xi:include href="../../programs/loops/increment-decrement-1.cpp" parse="text"/>
</program>
</listing>

<listing>
<program label="loops_loop-control-variable-1b" interactive="activecode">
<xi:include href="../../programs/loops/increment-decrement-1b.cpp" parse="text"/>
</program>
</listing>


  <p>The first version displays the values 1 to 5, which is what you would likely expect looking at the initial value of <pf>i</pf> and the loop's condition. Notice that it increments the loop control variable (<pf>i</pf>) at the end of the loop. The second version increments the loop control variable at the start of the loop. Because of this, the 1 we start with is changed to 2 before it is printed. And when <pf>i</pf> is 5, it makes the condition true, but then is changed to 6 (which would have stopped the loop) before we use it.</p>

  <insight><p>Once we start the loop body, changing the loop control variable can't stop the loop until we reach the end of the loop body and redo the condition check.</p></insight>

  <p>The location we change the loop control variable splits the code inside a loop into part that works with the current value (that was tested in the condition) and part that works with the next value.</p>

  <program>
    while (i &lt; 5) {
      // i still has the old value we tested in the condition
      i = i + 1;   // update to next value
      // i now has the new value
    }
  </program>

  <p>Usually, we want to use the value we just tested in the condition. Then, after we are done using that value, we update it to the next value for the next iteration of the loop. The logic is something like this:</p>

    <pre>
INITIALIZE LOOP VARIABLE
AS LONG AS LOOP VARIABLE STILL MEETS CONDITION
    DO SOMETHING WITH CURRENT VALUE OF LOOP VARIABLE
    UPDATE LOOP VARIABLE TO NEXT VALUE
  </pre>

  <p>After updating the loop variable, we immediately return back to the test and get to decide <q>Should we actually run the loop with this value? Or should we stop?</q>.</p>

  <p>Although there are times when you might change the loop control at the start of the loop, or even in the middle of the loop, the logic for those situations tends to be more complex. Any code that is after the change to the loop control variable is working with the <q>next</q> value. We will not yet have even tested that value to see if we want to continue working with it.</p>

<insight>
  <p>Modify the loop control variable at the end of the loop unless you have a specific reason to do otherwise. All of your work should be done with the <q>current</q> value, not the <q>next</q> one.</p>
  </insight>

  <p>It is possible to have a variable that is part of our condition that is not the loop control variable. Consider this sample:</p>
  <program> <![CDATA[
    double goal = 10000;
    double current = 1000;
    while (current < goal) {
        cout << current << endl;
        current = current * 1.1;
    }
]]>
  </program>

  <p>Here, <pf>goal</pf> is part of the condition, but it is not the loop control variable. The loop control variable is <pf>current</pf> because it is the variable that is changing inside the loop body and will eventually make the condition false.</p>

  <exercise label="loops_loop-control-variable-ex-1">
    <statement>
      <p>What is the name of the loop control variable in the program below? <fillin mode="string" answer="x"/></p>
      <program line-numbers="yes">
        <code><![CDATA[
int w = 0;
int x = 1;
int y = 10;
while (x < 100) {
    w = w + x;
    x = x * 2;
}
        ]]></code>
        </program>
    </statement>
      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes"/>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              <p>What variable is tested in the loop condition?</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
  </exercise>

  
  <exercise label="loops_loop-control-variable-ex-2">
    <statement>
      <p>What is the name of the loop control variable in the program below? <fillin mode="string" answer="b"/></p>
      <program line-numbers="yes">
        <code><![CDATA[
int a = 0;
int b = 100;
int c = 10;
while (a < b) {
    b = b - c;
}
        ]]></code>
        </program>
    </statement>
      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes"/>
          </test>
          <test>
            <strcmp>.*</strcmp>
            <feedback>
              <p>What variable is tested in the loop condition and is changed inside the loop body?</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
  </exercise>

</section>