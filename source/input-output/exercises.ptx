<exercises xml:id="input-output_exercises"
           xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Exercises</title>
  <introduction>
    <p>The exercises in this chapter make use of the following datafiles.</p>
    <listing xml:id="datafile-poem-listing">
    <datafile label="datafile-poem"
              xml:id="datafile-poem"
              filename="poem.txt">
      <pre>Two roads diverged in a yellow wood,
And sorry I could not travel both
And be one traveler, long I stood
And looked down one as far as I could
To where it bent in the undergrowth;
Then took the other, as just as fair,
And having perhaps the better claim
Because it was grassy and wanted wear,
Though as for that the passing there
Had worn them really about the same,
And both that morning equally lay
In leaves no step had trodden black.
Oh, I kept the first for another day!
Yet knowing how way leads on to way
I doubted if I should ever come back.
I shall be telling this with a sigh
Somewhere ages and ages hence:
Two roads diverged in a wood, and I,
I took the one less traveled by,
And that has made all the difference.</pre>
    </datafile>
  </listing>

  <listing xml:id="datafile-class-listing">
    <datafile label="datafile-class"
              xml:id="datafile-class"
              filename="class.txt">
      <pre>Alex     Jones      9        3.4    14
Beth     Hamilton   12       3.7    18
Charles  White      11       3.5    16
Daniel   Kim        10       3.8    16
Ethan    Brooks     11       3.9    17
Faith    Flemmings  10       3.0    15
Gigi     Guerro     9        3.2    14</pre>
    </datafile>
    </listing>
  </introduction>

  <exercise label="input-output_exercises-ex-1">
    <statement>
      <p>Write a program that reads the first <pf>skipWords</pf> number of words from <xref ref="datafile-poem-listing"
              text="custom">
        poem.txt</xref> without printing them and prints the next word to <pf>cout</pf>.</p>
    </statement>
    <program add-files="datafile-poem"
             interactive="activecode">
        <preamble><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipWords = 0;
    cin >> skipWords;
]]>
        </preamble>
        <code>
    // Write your code here.
</code>
<postamble><![CDATA[
}
]]></postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>Two</output>
      </iotest>
      <iotest>
        <input>7</input>
        <output>And</output>
      </iotest>
      <iotest>
        <input>17</input>
        <output>traveler</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p>You might want to start by reading and printing the first word just to make sure your input is working.</p>
    </hint>
    <hint>
      <p>While debugging, print out something like <pf>WORD skip</pf> for each skipped word. Once you are confident you are skipping the words, you can remove that print statement.</p>
    </hint>
  </exercise>

  <exercise label="input-output_exercises-ex-2">
    <statement>
      <p>Write a program that reads the first <pf>skipLines</pf> number of lines from <xref ref="datafile-poem-listing"
              text="custom">
        poem.txt</xref> without printing them and prints the next line to <pf>cout</pf>.</p>
    </statement>
    <program add-files="datafile-poem"
             interactive="activecode">
        <preamble><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipLines = 0;
    cin >> skipLines;
]]>
        </preamble>
        <code>
    // Write your code here.
</code>
<postamble><![CDATA[
}
]]></postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>Two roads diverged in a yellow wood,</output>
      </iotest>
      <iotest>
        <input>2</input>
        <output>And be one traveler, long I stood</output>
      </iotest>
      <iotest>
        <input>19</input>
        <output>And that has made all the difference.</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p><pf>getline</pf> is the easy way to read a whole line.</p>
    </hint>
  </exercise>

  <exercise label="input-output_exercises-ex-3">
    <statement>
      <p>The file <xref ref="datafile-class-listing"
              text="custom">class.txt</xref> has lines that look
        like this:</p>
      <pre>First      Last     Grade        GPA    Age</pre>
      <p>Hidden code will open the file and read past some number of the lines (determined by the input). You should add code
        to continue reading from <pf>inFile</pf> and print the first name from the next line in the
        file. (It is safe to use <pf>>></pf> for your input even though the hidden code uses <pf>getline</pf>).</p>
    </statement>
    <program add-files="datafile-class"
             interactive="activecode">
        <preamble visible="no"><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipLines = 0;
    cin >> skipLines;
    ifstream inFile;
    inFile.open("class.txt");
    for (int i = 0; i < skipLines; ++i) {
        string line;
        getline(inFile, line);
    }
]]>
        </preamble>
        <code>
// Hidden code is above... main() is already started and inFile is open

    // Write your code to read from inFile here
</code>
<postamble>
}
</postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>Alex</output>
      </iotest>
      <iotest>
        <input>1</input>
        <output>Beth</output>
      </iotest>
      <iotest>
        <input>3</input>
        <output>Daniel</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p>This is much easier using <pf>>></pf> instead of <pf>getline</pf></p>
    </hint>
    <hint>
      <p>Remember you have to read all of the tokens in order. If you don't want a piece of data, read it and then do nothing with it.</p>
    </hint>
  </exercise>

  <exercise label="input-output_exercises-ex-4">
    <statement>
      <p>The file <xref ref="datafile-class-listing"
              text="custom">class.txt</xref> has lines that look
        like this:</p>
      <pre>First      Last     Grade        GPA    Age</pre>
      <p>Hidden code will open the file and read past some number of the lines (determined by the input). You should add code
        to continue reading from <pf>inFile</pf> and print the first name and age (with a space between) of the next line in the
        file. (It is safe to use <pf>>></pf> for your input even though the hidden code uses <pf>getline</pf>).</p>
    </statement>
    <program add-files="datafile-class"
             interactive="activecode">
        <preamble visible="no"><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipLines = 0;
    cin >> skipLines;
    ifstream inFile;
    inFile.open("class.txt");
    for (int i = 0; i < skipLines; ++i) {
        string line;
        getline(inFile, line);
    }
]]>
        </preamble>
        <code>
// Hidden code is above... main() is already started and inFile is open

    // Write your code to read from inFile here
</code>
<postamble>
}
</postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>Alex 14</output>
      </iotest>
      <iotest>
        <input>1</input>
        <output>Beth 18</output>
      </iotest>
      <iotest>
        <input>3</input>
        <output>Daniel 16</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p>This is much easier using <pf>>></pf> instead of <pf>getline</pf></p>
    </hint>
    <hint>
      <p>Remember you have to read all of the tokens in order. If you don't want a piece of data, read it and then do nothing with it.</p>
    </hint>
  </exercise>
  
  <exercise label="input-output_exercises-ex-5">
    <statement>
      <p>The file <xref ref="datafile-class-listing"
              text="custom">class.txt</xref> has lines that look
        like this:</p>
      <pre>First      Last     Grade        GPA    Age</pre>
      <p>Hidden code will open the file and read past some number of the lines (determined by the input). You should add code
        to continue reading from <pf>inFile</pf> and print out the next three first names with a space after each. (It is safe to use <pf>>></pf> for your input even though the hidden code uses <pf>getline</pf>).</p>
    </statement>
    <program add-files="datafile-class"
             interactive="activecode">
        <preamble visible="no"><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipLines = 0;
    cin >> skipLines;
    ifstream inFile;
    inFile.open("class.txt");
    for (int i = 0; i < skipLines; ++i) {
        string line;
        getline(inFile, line);
    }
]]>
        </preamble>
        <code>
// Hidden code is above... main() is already started and inFile is open

    // Write your code to read from inFile here
</code>
<postamble>
}
</postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>Alex Beth Charles</output>
      </iotest>
      <iotest>
        <input>1</input>
        <output>Beth Charles Daniel</output>
      </iotest>
      <iotest>
        <input>4</input>
        <output>Ethan Faith Gigi</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p>If you use <pf>>></pf>, remember that you have to read all of the tokens in order. If you don't want a piece of data, read it and then do nothing with it.</p>
    </hint>
    <hint>
      <p>This is a spot where it might make sense to mix <pf>>></pf> and <pf>getline</pf>. On each line, consume the first name by reading it into a variable, then use getline to read the rest of the line (and ignore it).</p>
    </hint>
  </exercise>

  <exercise label="input-output_exercises-ex-6">
    <statement>
      <p>The file <xref ref="datafile-class-listing"
              text="custom">class.txt</xref> has lines that look
        like this:</p>
      <pre>First      Last     Grade        GPA    Age</pre>
      <p>Hidden code will open the file and read past some number of the lines. You should add code
        to continue reading from <pf>inFile</pf> and print out the average of the GPA values for all the rest of the lines. (It is safe to use <pf>>></pf> for your input even though the hidden code uses <pf>getline</pf>).</p>
      <p>Note that there is a newline after the last piece of data (the line that starts with <pf>Gigi</pf> and ends with <pf>14</pf>). You will likely need to check <pf>infile</pf> for an error after attempting to read in the data for each line before you count the line or do anything with it.</p>
    </statement>
    <program add-files="datafile-class"
             interactive="activecode">
        <preamble visible="no"><![CDATA[#include <iostream>
#include <fstream>
#include <string>
#include <format>
using namespace std;

int main() {
    int skipLines = 0;
    cin >> skipLines;
    ifstream inFile;
    inFile.open("class.txt");
    for (int i = 0; i < skipLines; ++i) {
        string line;
        getline(inFile, line);
    }
]]>
        </preamble>
        <code>
// Hidden code is above... main() is already started and inFile is open

    // Write your code to read from inFile here
</code>
<postamble>
}
</postamble>
    <tests>
      <iotest>
        <input>0</input>
        <output>3.5</output>
      </iotest>
      <iotest>
        <input>5</input>
        <output>3.1</output>
      </iotest>
    </tests>
    </program>
    <hint>
      <p>Start by just printing out all of the GPAs. The last two GPAs should be 3 and 3.2. If you see an extra value after those, or two copies of 3.2 at the end, you are probably trying to read one extra line of data and failing. Check for failure after reading the data before you use it.</p>
    </hint>
    <hint>
      <p>You will need to accumulator variables - one to add up the GPAs and the other to keep a count of how many lines you have read.</p>
    </hint>
  </exercise>
</exercises>