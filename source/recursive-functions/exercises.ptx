<section xml:id="recursive-functions_exercises"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>Exercises</title>

  
  <exercise label="recursive-functions_exercises-ex-1">
    <statement>
      <p>Implement the recursive function: <pf>int power(int x, int p)</pf></p>

      <p>The returned value should be <pf>x</pf> to the <pf>p</pf> power. You don't have to worry about negative exponents. Note that the function header is there, you just need to fill in the body.</p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

int power(int x, int p) {
    //YOUR CODE HERE
}
        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-power-end.cpp" parse="text"/>
        </tests>
    </program>
    <hint><p>What is an easy obvious power to calculate for any value x? That is a base case.</p></hint>
    <hint><p>Say you were told to calculate 5 to the 10th power and knew you could ask me what the value of 5 to the 9th power was. How could you get your answer?</p></hint>
  </exercise>

  
  <exercise label="recursive-functions_exercises-ex-2">
    <statement>
      <p>Write a function int <pf>investmentLength(double money, double goal, double interestRate)</pf> that returns the time it will take to reach the given goal if you start with the given amount of money and invest at the specified interest rate. (Interest rate will be a %, divide by 100.0 before using).</p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

int investmentLength(double money, double goal, double interestRate) {
    //YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-invest-end.cpp" parse="text"/>
        </tests>
    </program>
    <hint><p>Your base case should return 0 - indicating you don't need to invest for any years because you've met your goal</p></hint>
    <hint><p>The general case represents one more year of your money having been invested. It should return one year plus the result of the recursive call with updated parameters.</p></hint>
    <hint><p>If you leave the money invested until next year, what would the new amount of money be? Would the goal or interest rate change for the recursive call?</p></hint>
  </exercise>

  <exercise label="recursive-functions_exercises-ex-3">
    <statement>
      <p>Implement a recursive function to turn an integer into a string of binary digits (1s and 0s) <pf>string makeBinary(int n)</pf></p>
      <p>Use the divide by 2 method to convert decimal to binary (you can refer to <url href="https://runestone.academy/ns/books/published/welcomecs2/data-representation_binary-conversions-multiplication-division-method.html#data-representation_decimal-to-binary-1">Welcome to CS</url> for how the algorithm works).</p>
      <p>The logic for converting 13 to binary (1101):</p>

        <tabular halign="center">
          <col width="15%"/>
          <col width="15%"/>
          <col width="15%"/>
          <col width="15%"/>
          <col width="40%"/>
          <row header="yes"
              bottom="major">
            <cell>Number</cell>
            <cell>/2 Quotient</cell>
            <cell>/2 Remainder</cell>
            <cell>Result</cell>
            <cell>Comment</cell>
          </row>
          <row>
            <cell>13</cell>
            <cell>6</cell>
            <cell>1</cell>
            <cell>"1"</cell>
            <cell><p>Add 1 to answer, continue working with 6</p></cell>
          </row>
          <row>
            <cell>6</cell>
            <cell>3</cell>
            <cell>0</cell>
            <cell>"01"</cell>
            <cell><p>Add 0 to answer, continue working with 3</p></cell>
          </row>
          <row>
            <cell>3</cell>
            <cell>1</cell>
            <cell>1</cell>
            <cell>"101"</cell>
            <cell><p>Add 1 to answer, continue working with 1</p></cell>
          </row>
          <row>
            <cell>1</cell>
            <cell>0</cell>
            <cell>1</cell>
            <cell>"1101"</cell>
            <cell><p>Add 1 to answer, continue working with 0</p></cell>
          </row>
          <row>
            <cell>0</cell>
            <cell>0</cell>
            <cell>0</cell>
            <cell>"1101"</cell>
            <cell>Once we reach 0, stop.</cell>
          </row>
        </tabular>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

string makeBinary(int n) {
    // YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-binary-end.cpp" parse="text"/>
        </tests>
    </program>
  </exercise>
  

  <exercise label="recursive-functions_exercises-ex-4">
    <statement>
      <p>Implement the function: <pf>double series(int steps)</pf></p>
      <p>This function should return the sum of the first <pf>steps</pf> number of terms from the series 1 + 1/2 + 1/4 + 1/8 + 1/16....</p>
      <p>For example:
      <ul>
        <li>series(1) would give 1</li>
        <li>series(2) would give 1.5</li>
        <li>series(3) would give 1.75</li>
        <li>series(4) would give 1.875</li>
      </ul></p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

double series(int steps) {
    // YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-series-end.cpp" parse="text"/>
        </tests>
    </program>
  </exercise>

  <exercise label="recursive-functions_exercises-ex-5">
    <statement>
      <p>Implement the function int <pf>letterCount(const string&amp; s, char a)</pf>. It should return the number of times char <pf>a</pf> appears in <pf>s</pf>.</p>
      <p>If you want to avoid making substrings of s, you can create a recursive helper that the provided <pf>letterCount</pf> calls.</p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

int letterCount(const string&amp; s, char a) {
    // YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-letterCount-end.cpp" parse="text"/>
        </tests>
    </program>
  </exercise>

  <exercise label="recursive-functions_exercises-ex-6">
    <statement>
      <p>Write a function <pf>int numLegs(const vector&lt;char>&amp; animals, int curPosition = 0)</pf>. The vector will consist only of the chars 'c' and 'd' representing "cow" or "duck".  The function should calculate the total number of legs those animals have (assume no mutations or industrial accidents... a cow has 4 and a duck has 2).</p>
      <p>Use the changing index strategy.</p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

int numLegs(const vector&lt;char>&amp; animals, int curPosition = 0) {
    // YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-legs-end.cpp" parse="text"/>
        </tests>
    </program>
    <hint>Your recursion should change the <pf>curPosition</pf> by 1. When <pf>curPosition</pf> is the same as the <pf>.size()</pf> of the vector, you have reached the end.</hint>
  </exercise>

  <exercise label="recursive-functions_exercises-ex-7">
    <statement>
      <p>Implement the function <pf>int getMax(const vector&lt;int>&amp;, int curIndex = 0)</pf>. It should return the largest int in the vector.</p>
    </statement>
    <program interactive="activecode">
        <preamble>
<xi:include href="../../programs/recursive-functions/ex-recursion-start.cpp" parse="text"/>
        </preamble>
        <code>

int getMax(const vector&lt;int>&amp;, int curIndex = 0) {
    // YOUR CODE HERE
}

        </code>
        <tests visible="yes">
<xi:include href="../../programs/recursive-functions/ex-getmax-end.cpp" parse="text"/>
        </tests>
    </program>
    <hint>Your base case should be when the index is at the last element (<pf>.size() - 1</pf>). If there are no other elements to worry about (because you responsible for the last one), what ever value it has must be the maximum.</hint>
  </exercise>

</section>