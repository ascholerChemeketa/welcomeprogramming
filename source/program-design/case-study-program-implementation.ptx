<section xml:id="program-design_case-program-implementation"
         xmlns:xi="http://www.w3.org/2001/XInclude">

         

  <title>Case Study: Building a Multi-File Program</title>

  <introduction>
    <p>Now that we know how to separate code into multiple files, we are ready to look at implementing the designs we came up with in <xref ref="program-design_program-design"/>. Since we have already done the design for our functions, we will skip directly to writing code for the <q>Top Down</q> design.</p>
  </introduction>

  <subsection>
    <title>The project structure</title>

    <p>We will be building a single project (set of files) with two programs. One program will be the program we want to write - one that reads in two dates and calculates the difference between them. The other program will be a test program that verifies functions work correctly.</p>

    <note><p>Depending on the development environment you are using outside of this book, the practicalities of setting up two programs that build from overlapping files may vary. You may need to set up two separate <q>projects</q> in your development environment or you may be able to set up one <q>project</q> with multiple build targets.</p></note>

    <p>The code will be split into multiple files, with the following structure:
    <ul>
      <li><pf>DateFunctions.cxx</pf>: will contain the implementations of the date-related functions. We will be implementing it as a module called <pf>DateFunctions</pf>. We could instead build it as a .h/.cpp file pair - that implementation is available in the appendix to this chapter.</li>
      <li><pf>main.cpp</pf>: the main file for the <q>real</q> program. It will have the <pf>main</pf> function. It will import <pf>DateFunctions</pf> to help do its work.</li>
      <li><pf>dateTests.cpp</pf>: the test program that verifies the functions from <pf>DateFunctions</pf> work correctly.</li>
    </ul>
    </p>

    <p>We will use <term>incremental development</term> to build our program in small steps, testing each part as we go. We will also use <term>test driven development</term><mdash/>for each function that we implement, we will start by writing a test for it first and then using that test to develop the function. Only after the function is working, will we try to integrate it into the <q>real</q> program.</p>

  </subsection>

  <subsection>
    <title>Implementing getMonth</title>

    <p>We need to pick somewhere to start. It makes sense to pick a  <pf>getMonth</pf> function first, as it is a simple function that does not depend on anything else.</p>

    <p>We will start by writing tests for the <pf>getMonth</pf> function. This will help us define the expected behavior of the function before we implement it. The two important valid cases are if the month has 1 or 2 digits. We should have tests for both of those.</p>
    <p>We should also consider that happens if there is an invalid value. Either a number like 13 or a non-numeric string. We will throw an exception in those cases as it is not clear from the context of that low level function what the right way to handle the issue is. (Recall that the core idea of exceptions is to allow us to detect an issue in low-level code and propagate it to higher levels that might better know how to handle it.)</p>

    <p>Here are some test cases. We would expect the following input/output pairs for the function:
    </p>

    <tabular>
      <row header="yes"
            bottom="major">
        <cell>Input</cell>
        <cell>Output</cell>
      </row>
      <row>
        <cell>
          <pf>"3/4/2023"</pf>
        </cell>
        <cell><pf>3</pf></cell>
      </row>
      <row>
        <cell>
          <pf>"12/31/1999"</pf>
        </cell>
        <cell><pf>12</pf></cell>
      </row>
      <row>
        <cell>
          <pf>"1/1/2001"</pf>
        </cell>
        <cell><pf>1</pf></cell>
      </row>
      <row>
        <cell>
          <pf>"15/1/2001"</pf>
        </cell>
        <cell>Throw exception</cell>
      </row>
      <row>
        <cell>
          <pf>"1a5/1/2001"</pf>
        </cell>
        <cell>Throw exception</cell>
      </row>
    </tabular>


    <p>Written as unit tests in <pf>dateTests.cpp</pf>, this will look like the following:</p>

    <listing xml:id="program-design_case-study-test-getMonth-listing"><title><pf>dateTests.cpp</pf> - getMonth version</title>
    <program xml:id="program-design_case-study-test-getMonth"
             label="program-design_case-study-test-getMonth"
             filename="dateTests.cpp"
             line-numbers="yes">
<xi:include href="../../programs/program-design/case-study-test-getMonth.cpp" parse="text"/>
    </program>
    </listing>

    <p>With those tests in place, we are ready to implement the <pf>getMonth</pf> function in <pf>DateFunctions.cxx</pf>:</p>

    <listing xml:id="program-design_case-study-implementation-getMonth-listing"><title><pf>DateFunctions.cxx</pf> - getMonth implementation</title>
    <program xml:id="program-design_case-study-implementation-getMonth"
             label="program-design_case-study-implementation-getMonth"
             filename="DateFunctions.cxx">
<xi:include href="../../programs/program-design/case-study-dateFunctions-1.cxx" parse="text"/>
    </program>
    </listing>

    <p>Now we can go back to compile the tests with our module. The following activecode is set up to compile both the test tile (shown), as well as our module file, using a recipe like:</p>

    <console><output>g++ -std=c++20 -fmodules-ts dateTests.cpp DateFunctions.cxx -o test-program.exe</output></console>

    <listing>
    <program xml:id="program-design_case-study-test-getMonth-2"
             label="program-design_case-study-test-getMonth-2"
             filename="dateTests.cpp"
             line-numbers="yes"
             compile-also="program-design_case-study-implementation-getMonth"
             interactive="activecode">
        <code></code>
        <tests visible="yes">
<xi:include href="../../programs/program-design/case-study-test-getMonth.cpp" parse="text"/>
        </tests>
    </program>
    </listing>

    <exercise label="program-design_case-program-implementation-ex-1">
      <statement>Which test case fails?</statement>
      <choices randomize="yes">
        <choice correct="yes"><statement>The test for the invalid month 1a5</statement><feedback>Correct. It turns out that stoi will turn <pf>1a5</pf> into <pf>1</pf>, ignore the <pf>a5</pf>, and not throw an exception. To see what the function actually returns, we can add some print statements or use a debugger.</feedback></choice>
        <choice><statement>The test for the valid month <pf>12</pf></statement></choice>
        <choice><statement>The test for the invalid month <pf>13</pf></statement></choice>
        <choice><statement>The test for the invalid month <pf>abc</pf></statement></choice>
      </choices>
    </exercise>
    <p>It looks like we have a bug to fix.</p>
  </subsection>

  <subsection>
    <title>Fixing getMonth</title>
    <p>Before going on to other functions, we should fix <pf>getMonth</pf>. It appears we will need to scan the <pf>monthNum</pf> string to make sure that each character is a digit.</p>
    <p>We can do this by using a loop to check each character in the string. Something like:</p>
    <listing>
    <program>
      for(char c: monthPart) {
          if(!isdigit(c)) {
              throw logic_error("Month must be a number");
          }
      }
    </program>
    </listing>

    <activity label="program-design_case-program-implementation-act-2" xml:id="program-design_case-study-implementation-getMonth-fix-listing">
      <statement>
      <p>Try adding the loop shown above (or similar code that checks if all the characters are digits) to this copy of <pf>DateFunctions.cxx</pf>. (Right after the <pf>monthPart</pf> variable is assigned is a logical place). The activecode is set to compile, but not link. It will tell you if you have a compile error, but not if your implementation is correct. (We will check that below.)</p>
      </statement>

      <program xml:id="program-design_case-study-implementation-fix-getMonth"
              label="program-design_case-study-implementation-fix-getMonth"
              interactive="activecode"
              extra-compiler-args="-c"
              filename="DateFunctions.cxx">
  <xi:include href="../../programs/program-design/case-study-dateFunctions-1.cxx" parse="text"/>
      </program>
    </activity>

    <exercise label="program-design_case-study-test-getMonth-3">
      <statement>
        <p>After you have added the recommended code to <xref ref="program-design_case-study-implementation-getMonth-fix-listing"/>, rerun the copy of the tests below and make sure the tests all pass.</p>
      </statement>
      <program xml:id="program-design_case-study-test-getMonth-3"
              filename="dateTests.cpp"
              line-numbers="yes"
              compile-also="program-design_case-study-implementation-fix-getMonth"
              interactive="activecode">
        <code></code>
        <tests visible="yes">
<xi:include href="../../programs/program-design/case-study-test-getMonth.cpp" parse="text"/>
        </tests>
      </program>
    </exercise>
  </subsection>

  <subsection>
    <title>Using getMonth in the real program</title>

    <p>Now that we have implemented and tested <pf>getMonth</pf>, we could use it in our main program. According to our design (<xref ref="top-down-design-example"/>), we won't actually call <pf>getMonth</pf> from <pf>main</pf>. It will be used by <pf>dateToDays</pf>, which is called by <pf>daysBetween</pf>, which is called from <pf>main</pf>. So the only reason to work on <pf>main</pf> at this point would be if we wanted to do some manual testing using real user input.</p>

    <p>Here is what doing so might look like. This sample is set to compile with a recipe that uses <pf>main.cpp</pf> and our module, but not the unit tests:</p>

    <console><output>g++ -std=c++20 -fmodules-ts main.cpp DateFunctions.cxx -o program.exe</output></console>

    <listing xml:id="program-design_case-study-implementation-main-listing"><title><pf>main.cpp</pf> - using getMonth</title>
    <program xml:id="program-design_case-study-implementation-main"
             label="program-design_case-study-implementation-main"
             filename="main.cpp"
             line-numbers="yes"
             compile-also="program-design_case-study-implementation-getMonth"
             interactive="activecode">
    <code>
<xi:include href="../../programs/program-design/case-study-main.cpp" parse="text"/>
</code>
      <stdin>3/4/2025</stdin>
    </program>
    </listing>
  </subsection>

</section>