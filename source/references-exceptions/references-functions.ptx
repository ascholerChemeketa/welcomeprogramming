<section xml:id="references-exceptions_references-functions"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>References and Functions</title>

  <p>We normally don't use references like was shown in the previous section. Having two names for the same local variable does nothing but cause confusion. Instead, references are used to allow us to share an existing storage location with a new scope instead of making a copy of what is stored.</p>

  <p>For example, normally when we pass something to a function, a copy is made of the passed value. The copy is stored into the parameter. Take this example:</p>

  <listing>
  <program label="references-exceptions_references-functions-program-1" interactive="codelens">
<xi:include href="../../programs/references-exceptions/references-functions-1.cpp" parse="text"/>
</program>
  </listing>

  <p>This is called <term>pass by value</term> because the parameter <pf>x</pf> in <pf>add</pf> gets a copy of the value of <pf>number</pf> from <pf>main</pf>. The memory diagram when we reach line 6 (after calling <pf>add</pf> from <pf>main</pf>) would look like: <idx><h>pass by value</h></idx></p>
  <figure>
  <caption>Memory diagram for <pf>add</pf> and <pf>main</pf></caption>
  <image width="40%"
          source="images/references-functions-1.svg"/>
</figure>

    <p><pf>x</pf> simply holds a copy of the <pf>number</pf> from <pf>main</pf>. No matter what we do to <pf>x</pf> inside <pf>add</pf>, we can't change what <pf>number</pf> holds. However, if we make <pf>x</pf> a reference, the memory diagram will look like:</p>

  <figure>
  <caption>Memory diagram for <pf>add</pf> and <pf>main</pf> where <pf>s</pf> is a reference.</caption>
  <image width="40%"
          source="images/references-functions-2.svg"/>
</figure>

  <p>Now <pf>x</pf> is a reference to <pf>number</pf>. This is called <term>pass by reference</term>. It links back to the memory in the <pf>main</pf> stack frame. If we change <pf>x</pf>, we change <pf>number</pf>. Try it out in this sample. The only change we have made is to make chop take a reference to an int: <pf>add(int&amp; x)</pf>.<idx><h>pass by reference</h></idx></p>

  <listing>
  <program label="references-exceptions_references-functions-program-2" interactive="codelens">
<xi:include href="../../programs/references-exceptions/references-functions-2.cpp" parse="text"/>
</program>
  </listing>

  <exercise label="references-exceptions_references-functions-ex-1">
    <statement>
      <p>Rewrite the prototype <pf>void upperCase(string s)</pf> so it takes its parameter by reference. <fillin mode="string"
                answer="void upperCase(string&amp; s)"/></p>
    </statement>
    <evaluation>
      <evaluate>
        <test>
          <strcmp>void upperCase\(\s*string\s*&amp;\s*s\s*\)</strcmp>
        </test>
      </evaluate>
    </evaluation>
  </exercise>

</section>