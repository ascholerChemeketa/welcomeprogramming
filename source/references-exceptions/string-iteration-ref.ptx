<section xml:id="references-exceptions_string-iteration-ref"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <title>References in Range-Based For Loops</title>

  <p>Back in <xref ref="strings_string-iteration"/> we learned about the ranged-based for loop and saw how it could be used to loop through a string:</p>

  <listing>
  <program label="references-exceptions_string-iteration-ref-1"
              highlight-lines="7"
              line-numbers="yes"
             interactive="activecode">
<xi:include href="../../programs/strings/string-iteration-3.cpp" parse="text"/>
</program>
  </listing>

  <p>In that example, we use a character variable, <pf>letter</pf>, to hold the current character. As we iterate through string, <pf>letter</pf> stores a copy of that character. That means, if we change <pf>letter</pf> inside the loop, it does not change the original string:</p>

  <listing>
  <program label="references-exceptions_string-iteration-ref-2"
              highlight-lines="8"
              line-numbers="yes"
             interactive="activecode">
<xi:include href="../../programs/references-exceptions/string-iteration-ref-1.cpp" parse="text"/>
</program>
  </listing>

  <p>However, we could instead declare <pf>letter</pf> to be a reference to a character (<pf>char&amp;</pf>). If we do so, letter is not storing a copy of the current character, it is an alias for the actual current character in the string. So changing it will modify the string:</p>

  <listing>
  <program label="references-exceptions_string-iteration-ref-3"
              highlight-lines="7-8"
              line-numbers="yes"
             interactive="activecode">
<xi:include href="../../programs/references-exceptions/string-iteration-ref-2.cpp" parse="text"/>
</program>
  </listing>

  <p>So this is another valuable use of references<mdash/>to write a range-based loop that can modify the values it is looping through.</p>

</section>